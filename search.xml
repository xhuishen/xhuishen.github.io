<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS常用系列整理</title>
    <url>/2019/03/10/CSS%E5%B8%B8%E7%94%A8%E7%B3%BB%E5%88%97%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<ul>
<li>ios 滑动不流畅</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">-webkit-<span class="attribute">overflow</span>-scrolling: touch;</span><br></pre></td></tr></table></figure>
 <a id="more"></a>
<ul>
<li>修改 chrome 记住密码后自动填充表单的黄色背景</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">select</span><span class="selector-pseudo">:-webkit-autofill</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">250</span>, <span class="number">255</span>, <span class="number">189</span>); <span class="comment">/* #FAFFBD; */</span></span><br><span class="line">  <span class="attribute">background-image</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>让页面里的字体变清晰，变细用 CSS 怎么做</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">-webkit-<span class="attribute">font</span>-smoothing: antialiased;</span><br></pre></td></tr></table></figure>
<ul>
<li>自定义滚动条</li>
</ul>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:</span><span class="symbol">:-webkit-scrollbar</span>                滚动条整体部分</span><br><span class="line"><span class="symbol">:</span><span class="symbol">:-webkit-scrollbar-thumb</span>          滚动条里面的小方块，能向上向下移动（或向左向右移动）</span><br><span class="line"><span class="symbol">:</span><span class="symbol">:-webkit-scrollbar-track</span>          滚动条的轨道（里面装有Thumb）</span><br><span class="line"><span class="symbol">:</span><span class="symbol">:-webkit-scrollbar-button</span>         滚动条的轨道的两端按钮，由于通过点击微调小方块的位置。</span><br><span class="line"><span class="symbol">:</span><span class="symbol">:-webkit-scrollbar-track-piece</span>    内层轨道，滚动条中间部分</span><br><span class="line"><span class="symbol">:</span><span class="symbol">:-webkit-scrollbar-corner</span>         边角，即垂直滚动条和水平滚动条相交的地方</span><br><span class="line"><span class="symbol">:</span><span class="symbol">:-webkit-resizer</span>                  两个滚动条的交汇处上用于拖动调整元素大小的小控件</span><br></pre></td></tr></table></figure>
<ul>
<li>文本竖向排列</li>
</ul>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">writing-<span class="keyword">mode</span>: <span class="keyword">vertical</span>-rl | <span class="keyword">vertical</span>-<span class="keyword">lr</span></span><br></pre></td></tr></table></figure>
<ul>
<li>文本两端对齐</li>
</ul>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">text</span>-align-<span class="keyword">last</span>:justify</span><br></pre></td></tr></table></figure>
<ul>
<li><p>ios 下 input 光标变大问题<br>;</p>
<blockquote>
<p>需要把行高和字体大小设置成一样的</p>
</blockquote>
</li>
<li><p>ios 下引入 fastclick 后点击失效问题</p>
</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简单粗暴的做法</span></span><br><span class="line">FastClick.prototype.focus = <span class="function"><span class="keyword">function</span><span class="params">(targetElement)</span> </span>&#123;</span><br><span class="line">    targetElement.focus();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>placeholder 颜色</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:-moz-placeholder</span> &#123;<span class="comment">/* Firefox 18- */</span></span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-moz-placeholder</span>&#123;<span class="comment">/* Firefox 19+ */</span></span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:-ms-input-placeholder</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Http请求与响应</title>
    <url>/2019/05/14/Http%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94/</url>
    <content><![CDATA[<h4 id="HTTP-的请求报文包括四个部分"><a href="#HTTP-的请求报文包括四个部分" class="headerlink" title="HTTP 的请求报文包括四个部分"></a>HTTP 的请求报文包括四个部分</h4><ul>
<li><p>请求行<br>请求方法，请求 URL，HTTP 协议版本</p>
<a id="more"></a>
</li>
<li><p>请求体<br>Accept： 客户端接收的数据类型<br>Cache-Control：请求和响应遵循的缓存机制<br>Connection：是否保持长连接。keep-alive （默认） close<br>Content-Length：请求体的长度<br>Content-Type： 请求的格式/类型 text/html<br>Host: 服务器域名<br>Referer: 当前请求的来源<br>Content-Encoding： 内容编码格式<br>User-Agent： 客户端信息<br>multipart/form-data：用以支持向服务器发送二进制数据，以便可以在 POST 请求中实现文件上传等功能</p>
</li>
<li><p>空行<br>用于告诉服务端请求头到此结束 以下内容不再是请求头的内容</p>
</li>
<li><p>请求数据<br>主要用于 POST 请求<br>相关的最常用的是（Content-Type 和 Content-Length ）</p>
</li>
</ul>
<h4 id="HTTP-的响应报文包括四个部分"><a href="#HTTP-的响应报文包括四个部分" class="headerlink" title="HTTP 的响应报文包括四个部分"></a>HTTP 的响应报文包括四个部分</h4><ul>
<li>状态行<br>服务器 HTTP 协议版本，响应状态码，状态码的文本描述</li>
<li>响应头<br>Connection：是否保持长连接。keep-alive （默认） close<br>Content-Length：请求体的长度<br>Content-Type： 请求的格式/类型 text/html<br>Location：重定向的位置<br>Server： 服务器用来处理请求的软件信息及版本信息<br>Vary：标识不可缓存的请求头列表<br>Date: 时间</li>
<li>空行<br>用于告诉客户端响应头到此结束 以下内容不再是响应头的内容</li>
<li>响应内容<br>服务端返回客户端的文本信息</li>
</ul>
<blockquote>
<p>参考资料 1.<a href="https://baike.baidu.com/item/HTTP%E8%AF%B7%E6%B1%82/10882159?fr=aladdin" target="_blank" rel="noopener">百度百科</a> 2.<a href="http://www.runoob.com/http/http-messages.html" target="_blank" rel="noopener">菜鸟教程</a></p>
</blockquote>
]]></content>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title>JS设计模式---1.富有表现力的JS</title>
    <url>/2018/12/07/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1-%E5%AF%8C%E6%9C%89%E8%A1%A8%E7%8E%B0%E5%8A%9B%E7%9A%84JS/</url>
    <content><![CDATA[<blockquote>
<p>前言: 最近准备把 js 设计模式这本书看一遍，然后也就是把书上的例子什么的挑挑拣拣做个记录。刚开始一些设计模式可能理解的不够深入，有些地方写的不是很到位，以后有更深的理解再回来补充。</p>
</blockquote>
 <a id="more"></a>
<h3 id="创建可被链式调用的类"><a href="#创建可被链式调用的类" class="headerlink" title="创建可被链式调用的类"></a>创建可被链式调用的类</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params">name, fn</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.prototype[name] = fn;    <span class="comment">//原型</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> Amin= <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line"> &#125;</span><br><span class="line"> Amin</span><br><span class="line">   .method(<span class="string">'start'</span>,<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">     ...</span><br><span class="line">  &#125;)</span><br><span class="line">   .method(<span class="string">'stop'</span>,<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">     ...</span><br><span class="line">   &#125;)</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Amin();  <span class="comment">//构造函数</span></span><br><span class="line">a.start();</span><br><span class="line">a.stop();</span><br></pre></td></tr></table></figure>
<h3 id="创建匿名函数-闭包"><a href="#创建匿名函数-闭包" class="headerlink" title="创建匿名函数 (闭包)"></a>创建匿名函数 (闭包)</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> baz;</span><br><span class="line"> (<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">var</span> foo =<span class="number">10</span>;</span><br><span class="line">   <span class="keyword">var</span> bar = <span class="number">2</span>;</span><br><span class="line">   baz = <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> foo * bar</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)()</span><br><span class="line"> baz()   <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<p>因为 baz 函数定义在闭包内 所以它可以访问到 foo 和 bar 两个变量 即使是在闭包执行结束后</p>
<h3 id="对象的易变性"><a href="#对象的易变性" class="headerlink" title="对象的易变性"></a>对象的易变性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">       <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  Person.prototype = &#123;</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> alice = <span class="keyword">new</span> Person(<span class="string">'Alice'</span>,<span class="number">30</span>);</span><br><span class="line">  <span class="keyword">var</span> bill = <span class="keyword">new</span> Person(<span class="string">'Bill'</span>,<span class="number">25</span>);</span><br><span class="line">  Person.prototype.getGreeting = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hi'</span> + <span class="keyword">this</span>.getName() + <span class="string">'!'</span></span><br><span class="line">  &#125;</span><br><span class="line">  alice.displayGreeting = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getGreeting()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(alice.getGreeting())  <span class="comment">//HiAlice!</span></span><br><span class="line">  <span class="built_in">console</span>.log(bill.getGreeting())     <span class="comment">//HiBill!</span></span><br><span class="line">  <span class="built_in">console</span>.log(alice.displayGreeting()) <span class="comment">//HiAlice!</span></span><br><span class="line">  <span class="built_in">console</span>.log(bill.displayGreeting())  <span class="comment">//not a function</span></span><br></pre></td></tr></table></figure>
<p>上面这个例子中，类的 getGreeting 方法定义在实例创建后，但是这两个实例依然可以获取到方法，原因在于 prototype 的工作机制。对象 alice 还得到了 displayGreeting 方法，而别的实例没有，是因为 displayGreeting 方法是 alice 的私有方法，并不存在于原型上</p>
]]></content>
      <tags>
        <tag>JS设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JS设计模式---10.适配器模式</title>
    <url>/2019/01/04/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-10-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="适配器模式的作用"><a href="#适配器模式的作用" class="headerlink" title="适配器模式的作用"></a>适配器模式的作用</h3><blockquote>
<p>适配器模式可用来在现有接口和不兼容的类之间进行适配，使用这种模式的对象又叫包装器。（个人理解其实就是用来做兼容的一种模式）</p>
</blockquote>
 <a id="more"></a>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><blockquote>
<p>适配器可以被添加到现有代码中以协调两个不同的接口。<br>从表面上看，适配器模式和门面模式很像，它们都是要对别的对象进行包装并改变其呈现的接口。但是它们的不同之处就在于如何改变接口。门面元素只是一个简化的接口，并没有额外的选择，而适配器则要把一个接口转换到另一个接口，他不会滤除某些能力，也不会简化接口。</p>
</blockquote>
<h3 id="方法兼容"><a href="#方法兼容" class="headerlink" title="方法兼容"></a>方法兼容</h3><blockquote>
<p>假设你有一个具有 3 个字符串参数的函数，但客户系统拥有的却是一个包含三个字符串元素的对象，此时就可以用一个适配器来衔接二者</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设你有一个对象 还有一个以三个字符串味参数的函数</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">      string1:<span class="string">"foo"</span>,</span><br><span class="line">      string2:<span class="string">"bar"</span>,</span><br><span class="line">      string3:<span class="string">"baz"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">interfaceMethod</span><span class="params">(str1,str2,str3)</span></span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 为了把obj作为参数传递给interfaceMethod 需要用到适配器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clientToInterfaceAdapter</span><span class="params">(o)</span></span>&#123;</span><br><span class="line">   interfaceMethod(o.string1,o.string2,o.string3)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 现在就可以把整个对象传递给这个函数</span></span><br><span class="line">clientToInterfaceAdapter(obj)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>吐槽一下，个人觉得，这种简单的完全没啥子必要。。。直接 interfaceMethod(obj.string1,obj.string2,obj.string3)又快又好。。可能书上是为了通熟易懂吧。</p>
</blockquote>
<h3 id="适配原有实现"><a href="#适配原有实现" class="headerlink" title="适配原有实现"></a>适配原有实现</h3><blockquote>
<p>在某些情况下，从客户一方对代码进行修改是不可能的。因此我们会避免创建 API。如果现有接口发生了改变，那么客户代码也必须进行相应的修改才能使用这个接口，否则整个应用系统就会有失灵的危险。在引入新接口之后，一般来说最好向客户方提供一些可为其实现新接口的适配器。</p>
</blockquote>
<h3 id="适配两个库"><a href="#适配两个库" class="headerlink" title="适配两个库"></a>适配两个库</h3><blockquote>
<p>适配 Prototype 库的\$函数到 YUI 的 get 方法的转换。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Prototype $ function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elements = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">for</span>(vari=<span class="number">0</span>;i&lt;<span class="built_in">arguments</span>.length;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">arguments</span>[i];</span><br><span class="line">     <span class="keyword">if</span>(<span class="keyword">typeof</span> element  == <span class="string">'string'</span>)</span><br><span class="line">       element = <span class="built_in">document</span>.getElementById(element);</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">       elements.push(element);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> elements</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// YUI get method</span></span><br><span class="line">YAHOO.util.Dom.get = <span class="function"><span class="keyword">function</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(YAHOO.lang.isString(el))&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(el);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(YAHOO.lang.isArray(el))&#123;</span><br><span class="line">    <span class="keyword">var</span> c = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;el.length;i++)&#123;</span><br><span class="line">       c[c.length] = YAHOO.util.get(el[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(el) <span class="keyword">return</span> el;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>二者的区别在于：get 具有一个参数，这个参数可以是一个 HTML 元素 字符串或者由字符串或 HTML 元素组成的数组，而\$函数并没有正式列出参数，而是由客户任意传入任意数目的参数，不管是字符串还是 HTML 元素都行<br>如果需要从使用 Prototype 的\$函数改为使用 YUI 的 get 方法(或者相反)，那么这个适配器需要这样写</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrototypeToYUIAdapter</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> YAHOO.util.Dom.get(<span class="built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">YUIToPrototypeAdapter</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> $.apply(<span class="built_in">window</span>,el intanceof <span class="built_in">Array</span> ? el : [el])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对于从Prototype投奔YUI的人来说，只需要添加下面这行代码</span></span><br><span class="line">$ = PrototypeToYUIAdapter</span><br><span class="line"><span class="comment">//同理 对于YUI改投Prototype的人来说</span></span><br><span class="line">YAHOO.util.Dom.get  = YUIToPrototypeAdapter</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JS设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JS设计模式---2.接口</title>
    <url>/2018/12/08/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-2-%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h3 id="什么是接口"><a href="#什么是接口" class="headerlink" title="什么是接口"></a>什么是接口</h3><p>接口提供了一种用以说明一个对象应该具有哪些方法的手段。</p>
 <a id="more"></a>
<h3 id="接口之利"><a href="#接口之利" class="headerlink" title="接口之利"></a>接口之利</h3><ul>
<li>接口可以告诉一个程序员一个类实现了哪些方法，从而帮助其使用这个类。</li>
<li>接口还有助于稳定不同类之间的通信方式。</li>
</ul>
<h3 id="接口之弊"><a href="#接口之弊" class="headerlink" title="接口之弊"></a>接口之弊</h3><ul>
<li>接口的使用在一定程度上强化了类型的作用，这降低了语言的灵活性。</li>
<li>JS 并没有提供对接口的内置支持，而试图模仿其他语言的内置功能总是会有一些风险</li>
<li>JS 中任何实现接口的方法都会对性能造成一定影响，在某种程度上这得归咎于额外的方法调用的开销</li>
<li>接口的使用最大的问题在于，无法强迫其他程序员遵守你定义的接口</li>
</ul>
<h3 id="模仿接口实现"><a href="#模仿接口实现" class="headerlink" title="模仿接口实现"></a>模仿接口实现</h3><ul>
<li>用注释描述接口</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">  interface Composite &#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(child)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">remove</span><span class="params">(child)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">getChild</span><span class="params">(child)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">   interface FormItem &#123;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">(child)</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">*/</span><br><span class="line">var CompositeFrom = <span class="function"><span class="keyword">function</span><span class="params">(id,method,action)</span></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;;</span><br><span class="line">CompositeFrom .prototype.add = <span class="function"><span class="keyword">function</span><span class="params">(child)</span></span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;;</span><br><span class="line">CompositeFrom .prototype.<span class="built_in">remove</span>= <span class="function"><span class="keyword">function</span><span class="params">(child)</span></span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;;</span><br><span class="line">CompositeFrom .prototype.getChild= <span class="function"><span class="keyword">function</span><span class="params">(child)</span></span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;;</span><br><span class="line">CompositeFrom .prototype.save= <span class="function"><span class="keyword">function</span><span class="params">(child)</span></span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这种做法易于实现，不需要额外的类或函数。可以提高代码的可重用性。</p>
<p>它的缺点在于没有为确保 CompositeFrom 真正实现了的正确方法而进行检查，也不会抛出错误告诉程序员程序中有问题，所以对于测试和调试也没有什么帮助。</p>
<ul>
<li>属性检查模仿接口</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  interface Composite &#123;</span></span><br><span class="line"><span class="comment">     function add(child);</span></span><br><span class="line"><span class="comment">     function remove(child);</span></span><br><span class="line"><span class="comment">     function getChild(child);</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">   interface FormItem &#123;</span></span><br><span class="line"><span class="comment">     function save(child);</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> CompositeFrom = <span class="function"><span class="keyword">function</span><span class="params">(id,method,action)</span></span>&#123;</span><br><span class="line">  <span class="comment">//定义一个数组  存放将要实现的接口</span></span><br><span class="line">  <span class="keyword">this</span>.implementsInterface = [<span class="string">'Composite'</span>,<span class="string">'FormItem'</span>];</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addForm</span><span class="params">(formInstance)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 调用检查函数 如果存在未定义的接口 抛出错误</span></span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">implements</span>(formInstance,<span class="string">'Composite'</span>,<span class="string">'FormItem'</span>))&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">'Object does not implement a required interface'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">implements</span><span class="params">(object)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>;i&lt;argumements.length;i++)&#123;</span><br><span class="line">    <span class="comment">// 遍历参数  跳过第一个</span></span><br><span class="line">    <span class="keyword">var</span> interfaceName = argument[i]; <span class="comment">//接口名称</span></span><br><span class="line">    <span class="keyword">var</span> interfaceFound = <span class="literal">false</span> ; <span class="comment">//flag</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;object.implementsInterface.length;j++)&#123;</span><br><span class="line">      <span class="comment">// 遍历存放接口名称的数组</span></span><br><span class="line">      <span class="keyword">if</span>(implementsInterface[j] == interfaceName)&#123;</span><br><span class="line">        interfaceFound = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  如果找到返回true  否则返回false</span></span><br><span class="line">    <span class="keyword">return</span> interfaceFound</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方法不仅对所实现的接口进行了注释说明，如果需要的接口不在一个类所宣称支持接口之内，它还会抛出一个错误，这样就可以强迫其它程序员声明这些接口。</p>
<p>它的缺点在于你不能保证所声明的接口是否真正实现。所以会存在检查通过，而方法不存在的问题。</p>
<ul>
<li>鸭式辨型模仿接口</li>
</ul>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Interface</span></span><br><span class="line"><span class="keyword">var</span> Composite = <span class="keyword">new</span> <span class="keyword">Interface</span>(<span class="string">'Composite'</span>,[<span class="string">'add'</span>,<span class="string">'remove'</span>,<span class="string">'getChild'</span>]);</span><br><span class="line"><span class="keyword">var</span> FormItem= <span class="keyword">new</span> <span class="keyword">Interface</span>(<span class="string">'FormItem'</span>,[<span class="string">'save'</span>]);</span><br><span class="line"><span class="comment">//CompositeForm 类</span></span><br><span class="line"><span class="keyword">var</span> CompositeForm= <span class="function"><span class="keyword">function</span><span class="params">(id,<span class="keyword">method</span>,action)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment"> ...</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span>;</span></span><br><span class="line">functiom addForm(formIntance)<span class="comment">&#123;</span></span><br><span class="line"><span class="comment">  // 辅助函数  如果引入未定义的接口会抛出错误</span></span><br><span class="line"><span class="comment">  ensureImplements(formIntance,Composite,FormItem);</span></span><br><span class="line"><span class="comment">  ...</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这种方法不依赖于注释。其各个方面都是可以强制实施的。ensureImplements 函数至少需要两个参数，第一个参数是想要检查的对象，其余参数是据以对那个对象进行检查的接口。</p>
<p>它的缺点在于，类并不声明自己实现了哪些接口，降低了代码的可重用性，也缺乏上面两种方法的自我描述性。它依赖于辅助类 Interface 和辅助函数 ensureImplements。</p>
<h3 id="Interface-类的实现"><a href="#Interface-类的实现" class="headerlink" title="Interface 类的实现"></a>Interface 类的实现</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"> <span class="keyword">var</span> Interface = <span class="function"><span class="keyword">function</span>(<span class="params">name,methods</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length != <span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Interface constructor called with <span class="subst">$&#123;<span class="built_in">arguments</span>.length&#125;</span> arguments, but expcted 2.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.methods = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;methods.length;i++)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> methodsp[i] !== <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Interface  constructor expects method name to be passed in as a string"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.methods.push(methods[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 辅助函数</span></span><br><span class="line">Interface.ensureImplements = <span class="function"><span class="keyword">function</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//  如果参数小于2个抛出错误</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length&lt;<span class="number">2</span>)&#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Function Interface.ensureImplements called with <span class="subst">$&#123;<span class="built_in">arguments</span>.length&#125;</span> arguments, but expected at least 2.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i&lt;<span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="keyword">interface</span> = arguments[i];</span><br><span class="line">      // 如果类的构造函数不是Interface 抛出错误</span><br><span class="line">      if(<span class="keyword">interface</span>.constructor !== Interface)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Function Interface.ensureImplements expects arguments two and above to be insterface of Interface"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">// 遍历存放接口名称的数组</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="keyword">interface</span>.methods.length;j++)&#123;</span><br><span class="line">        <span class="keyword">var</span> method = <span class="keyword">interface</span>.methods[j]</span><br><span class="line">        if(!object[method] || typeof method !== 'function')&#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Function Interface.ensureImplements: object does not implement the <span class="subst">$&#123;interface.name&#125;</span> interface.Method <span class="subst">$&#123;method&#125;</span> was not found`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="一个栗子"><a href="#一个栗子" class="headerlink" title="一个栗子"></a>一个栗子</h3><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">var DynamicMap =<span class="keyword">new</span> <span class="keyword">interface</span>(<span class="symbol">'DynamicMap</span>',[<span class="symbol">'centerOnPoint</span><span class="string">','</span>zoom<span class="string">','</span>draw']);</span><br><span class="line"><span class="keyword">function</span> <span class="title">displayRoute</span>(mapInterface) &#123;</span><br><span class="line">  interface.ensureImplements(mapInterface,DynamicMap);</span><br><span class="line">  mapInterface.centerOnPoint(<span class="number">12</span>,<span class="number">34</span>);</span><br><span class="line">  mapInterface.zoom(<span class="number">5</span>);</span><br><span class="line">  mapInterface.draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JS设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JS设计模式---4.继承</title>
    <url>/2018/12/11/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-4-%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<blockquote>
<p>场景： 我们需要目前有一个超类 Person，现在需要一个 Author 类来继承超类的所有方法及属性，并且拥有自己的方法和属性</p>
</blockquote>
 <a id="more"></a>
<h3 id="类式继承"><a href="#类式继承" class="headerlink" title="类式继承"></a>类式继承</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Person 超类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span><span class="params">(name)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>原型链</li>
</ul>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  继承超类的类 Author</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Author</span><span class="params">(name, books)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">   // 在使用new运算符时，系统会先创建一个空对象，然后调用构造函数，此过程中空对象处于作用域链最前端</span></span></span><br><span class="line"><span class="function"><span class="comment">   // 这里我们调用超类的构造函数，就需要手懂模拟这个过程。此时this代表空对象，name为参数</span></span></span><br><span class="line"><span class="function"><span class="comment">   Person.call(this, name);</span></span></span><br><span class="line"><span class="function"><span class="comment">   this.books = books;</span></span></span><br><span class="line"><span class="function"><span class="comment"> &#125;</span></span></span><br><span class="line"><span class="function"> <span class="title">Author</span>.<span class="title">prototype</span> = <span class="title">new</span> <span class="title">Person</span><span class="params">()</span>;</span> <span class="comment">// 使Author的原型指向Person的实例 此时原型的构造函数（constructor）被重置</span></span><br><span class="line"> Author.prototype<span class="function">.<span class="keyword">constructor</span> = <span class="title">Author</span>;</span> <span class="comment">// 重定向Author原型的构造函数 不定义的话此构造函数为空，那么将会向上查找，指向Person</span></span><br><span class="line"> Author.prototype.getBooks = <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">   return this.books;</span></span></span><br><span class="line"><span class="function"><span class="comment"> &#125;</span></span></span><br><span class="line"><span class="function"> <span class="title">var</span> <span class="title">author</span> = [];</span></span><br><span class="line"> author[<span class="number">0</span>] = <span class="keyword">new</span> Author(<span class="string">'Dustin Diaz'</span>, [<span class="string">'JavaScript Design Patterns'</span>]);</span><br><span class="line"> author[<span class="number">1</span>] = <span class="keyword">new</span> Author(<span class="string">'Ross Harmes'</span>, [<span class="string">'JavaScript Design Patterns'</span>]);</span><br><span class="line"> console.log(author[<span class="number">1</span>].getName()) <span class="comment">// Ross Harmes</span></span><br><span class="line"> console.log(author[<span class="number">1</span>].getBooks()) <span class="comment">// ['JavaScript Design Patterns']</span></span><br></pre></td></tr></table></figure>
<ul>
<li>extend 函数</li>
</ul>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="comment">// extend函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span><span class="params">(subClass, superClass)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  var F = function () &#123;&#125;</span>;</span> <span class="comment">// 先创造一个空对象</span></span><br><span class="line">  F.prototype = superClass.prototype; <span class="comment">// 使空对象的原型指向超类的原型</span></span><br><span class="line">  subClass.prototype = new F(); <span class="comment">// 使当前类的原型指向F的实例</span></span><br><span class="line">  subClass.prototype<span class="function">.<span class="keyword">constructor</span> = <span class="title">subClass</span>;</span> <span class="comment">// 重定向当前类的原型的构造函数</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// superclass 用于直接访问超类的方法</span></span><br><span class="line"> <span class="comment">// 使用场景 在既想重定义超类的方法而又想访问其在超类中的实现时 栗子在下面</span></span><br><span class="line">  subClass.superclass = superClass.prototype;</span><br><span class="line">  <span class="comment">// 判断构造器指向</span></span><br><span class="line">  <span class="keyword">if</span> (superClass.prototype<span class="function">.<span class="keyword">constructor</span> == <span class="title">Object</span>.<span class="title">prototype</span>.<span class="title">constructor</span>) <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    superClass.prototype.constructor = superClass</span></span></span><br><span class="line"><span class="function"><span class="comment">  &#125;</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="comment">// Author 类</span></span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">Author</span><span class="params">(<span class="keyword">name</span>, books)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  Author.superclass.constructor.call(this, name)</span></span></span><br><span class="line"><span class="function"><span class="comment">  this.books = books</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br><span class="line"><span class="function"><span class="title">extend</span><span class="params">(Author, Person)</span></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">xhui</span> = <span class="title">new</span> <span class="title">Author</span><span class="params">(<span class="string">'xhui'</span>, [<span class="string">'123'</span>])</span></span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span><span class="params">(xhui.getName()</span>)  <span class="comment">//xhui</span></span></span><br><span class="line"><span class="function"><span class="comment">// 利于supercalss来重定义超类的getName方法</span></span></span><br><span class="line"><span class="function"><span class="title">Author</span>.<span class="title">prototype</span>.<span class="title">getName</span> = <span class="title">function</span> <span class="params">()</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">  var name = Author.superclass.getName.call(this)</span></span></span><br><span class="line"><span class="function"><span class="comment">  return `$&#123;name&#125;</span>123123`</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">console</span>.<span class="title">log</span><span class="params">(xhui.getName()</span>) <span class="comment">//xhui123123</span></span></span><br></pre></td></tr></table></figure>
<h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// clone 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">object</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params">params</span>) </span>&#123;&#125;;</span><br><span class="line">  F.prototype = object;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Person 超类</span></span><br><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line">  name: <span class="string">'default name'</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Author = clone(Person);</span><br><span class="line">Author.books = [];</span><br><span class="line">Author.getBooks = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.books;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> author;</span><br><span class="line">author = clone(Author);</span><br><span class="line"><span class="built_in">console</span>.log(author.getName()) <span class="comment">//default name</span></span><br><span class="line">author.name = <span class="string">'xhui'</span>;</span><br><span class="line">author.books = [<span class="string">'js设计模式'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(author.getName()) <span class="comment">// 'xhui'</span></span><br><span class="line"><span class="built_in">console</span>.log(author.getBooks()) <span class="comment">//  ['js设计模式']</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>继承而来的成员的读和写具有不对等性。 在类式继承中，Author 的每一份实例都有自己的 books 数据副本。但是在原型式继承中大不相同， 一个克隆并非其原型对象的一份独完全立的副本，它只是一个以那个对象为原型对象的空对象。<br>克隆刚被创建时，author.name 其实是一个反指最初的 Person.name 的链接。对于从原型对象继承而来的成员，其读和写具有内在的不对等性。在你读取 author.name 时，如果你没有为其赋值，那么得到的是其原型对象的同名属性值。而你在为 author.name 赋值时，其实是在为 author 定义一个新属性。</p>
</blockquote>
<h3 id="掺元类"><a href="#掺元类" class="headerlink" title="掺元类"></a>掺元类</h3><blockquote>
<p>我们平时总会定义一个包含各种通用方法的类，然后用它来扩充其他类。这种包含各种通用方法的类就是掺元类。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// argument  辅助函数</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">argument</span>(<span class="params">receivingClass, givingClass</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">2</span>]) &#123;</span><br><span class="line">     <span class="comment">// 如果有第三个参数  则为扩充类扩充名为第三个参数的方法</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">       receivingClass.prototype[<span class="built_in">arguments</span>[i]] = givingClass.prototype[<span class="built_in">arguments</span>[i]]</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// 如果只有两个参数 为扩充类扩充掺元类所有的方法</span></span><br><span class="line">     <span class="keyword">for</span> (methodName <span class="keyword">in</span> givingClass.prototype) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!receivingClass.prototype[methodName]) &#123;</span><br><span class="line">         receivingClass.prototype[methodName] = givingClass.prototype[methodName]</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 掺元类</span></span><br><span class="line"> <span class="keyword">var</span> Mixin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"> Mixin.prototype = &#123;</span><br><span class="line">   serialize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> output = [];</span><br><span class="line">     <span class="keyword">for</span> (key <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">       output.push(<span class="string">`key:<span class="subst">$&#123;<span class="keyword">this</span>[key]&#125;</span>`</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> output</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Author</span>(<span class="params">name, books</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.name = name;</span><br><span class="line">   <span class="keyword">this</span>.books = books;</span><br><span class="line"> &#125;</span><br><span class="line"> argument(Author, Mixin) <span class="comment">//  argument(Author, Mixin, 'serialize')</span></span><br><span class="line"> <span class="keyword">var</span> author = <span class="keyword">new</span> Author(<span class="string">'xhui'</span>, [<span class="string">'js设计模式'</span>]);</span><br><span class="line"> <span class="built_in">console</span>.log(author.serialize())</span><br></pre></td></tr></table></figure>
<p>结果为<br><img src="https://upload-images.jianshu.io/upload_images/7390950-d6848a8fc556833d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1544515452.jpg"></p>
<h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><p>书上栗子有点长懒得写了。。。</p>
]]></content>
      <tags>
        <tag>JS设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JS设计模式---3.封装</title>
    <url>/2018/12/10/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-3-%E5%B0%81%E8%A3%85/</url>
    <content><![CDATA[<h3 id="封装之利"><a href="#封装之利" class="headerlink" title="封装之利"></a>封装之利</h3><ul>
<li>保证内部数据完整，易于重构</li>
<li>弱化模块间耦合，提高对象可重用性</li>
</ul>
<a id="more"></a>
<h3 id="封装之弊"><a href="#封装之弊" class="headerlink" title="封装之弊"></a>封装之弊</h3><ul>
<li>单元测试困难，错误调试困难</li>
<li>过度封装会损失类的灵活性</li>
<li>对新手不友好</li>
</ul>
<h3 id="创建对象的基本模式"><a href="#创建对象的基本模式" class="headerlink" title="创建对象的基本模式"></a>创建对象的基本模式</h3><blockquote>
<p>需求：创建一个存储一本书的类，并为其实现一个以 HTML 形式显示数据的方法。你只负责创建这个类，别人会创建和使用其实例。</p>
</blockquote>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用方式</span></span><br><span class="line"><span class="keyword">var</span> theHobbit = <span class="keyword">new</span> <span class="type">Book</span>(<span class="string">'0-395-07122-4'</span>,<span class="string">'The Hobbit'</span>,<span class="string">'J.R.R. Tolkien'</span>);</span><br><span class="line">theHobbit.display() <span class="comment">// 以HTML形式显示数据</span></span><br></pre></td></tr></table></figure>
<h5 id="门户大开型对象"><a href="#门户大开型对象" class="headerlink" title="门户大开型对象"></a>门户大开型对象</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Publication = <span class="keyword">new</span> interface(<span class="string">'Publication'</span>, [<span class="string">'getIsbn'</span>, <span class="string">'setIsbn'</span>, <span class="string">'getTitle'</span>, <span class="string">'setTitle'</span>, <span class="string">'getAuthor'</span>,</span><br><span class="line">  <span class="string">'setAuthor'</span>, <span class="string">'display'</span></span><br><span class="line">])</span><br><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span> (<span class="params">isbn, title, author</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setIsbn(isbn);</span><br><span class="line">  <span class="keyword">this</span>.setTitle(title);</span><br><span class="line">  <span class="keyword">this</span>.setAuthor(author);</span><br><span class="line">&#125;</span><br><span class="line">Book.prototype = &#123;</span><br><span class="line">  checkIsbn = <span class="function"><span class="keyword">function</span> (<span class="params">isbn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getIsbn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.isbn;</span><br><span class="line">  &#125;,</span><br><span class="line">  setIsbn: <span class="function"><span class="keyword">function</span> (<span class="params">isbn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.checkIsbn(isbn)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Book: Invalid ISBN'</span>);</span><br><span class="line">    <span class="keyword">this</span>.isbn = isbn;</span><br><span class="line">  &#125;,</span><br><span class="line">  getTitle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">  &#125;,</span><br><span class="line">  setTitle: <span class="function"><span class="keyword">function</span> (<span class="params">title</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.title = title || <span class="string">'No title specified'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  getAuthor: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.author;</span><br><span class="line">  &#125;,</span><br><span class="line">  setAuthor: <span class="function"><span class="keyword">function</span> (<span class="params">author</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.author = author || <span class="string">'No author specified'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  display: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//  ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>上述代码定义了一个接口，那么其他程序员就应该只能使用接口中定义的属性和方法。<br>这是门户大开型对象创建方式所能得到的最好结果。一个明确定义的接口，一些数据的赋值器和取值器，及一些检验方法。<br>缺点就是虽然我们定义了赋值器方法，但是这些属性仍然是公开的、可以直接设置的。</p>
</blockquote>
<h5 id="命名规范区分私有成员"><a href="#命名规范区分私有成员" class="headerlink" title="命名规范区分私有成员"></a>命名规范区分私有成员</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span> (<span class="params">isbn, title, author</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.setIsbn(isbn);</span><br><span class="line">   <span class="keyword">this</span>.setTitle(title);</span><br><span class="line">   <span class="keyword">this</span>.setAuthor(author);</span><br><span class="line"> &#125;</span><br><span class="line"> Book.prototype = &#123;</span><br><span class="line">   _checkIsbn = <span class="function"><span class="keyword">function</span> (<span class="params">isbn</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">   &#125;,</span><br><span class="line">   getIsbn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>._isbn;</span><br><span class="line">   &#125;,</span><br><span class="line">   setIsbn: <span class="function"><span class="keyword">function</span> (<span class="params">isbn</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">this</span>.checkIsbn(isbn)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Book: Invalid ISBN'</span>);</span><br><span class="line">     <span class="keyword">this</span>._isbn = isbn;</span><br><span class="line">   &#125;,</span><br><span class="line">   getTitle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>._title;</span><br><span class="line">   &#125;,</span><br><span class="line">   setTitle: <span class="function"><span class="keyword">function</span> (<span class="params">title</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>._title = title || <span class="string">'No title specified'</span>;</span><br><span class="line">   &#125;,</span><br><span class="line">   getAuthor: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>._author;</span><br><span class="line">   &#125;,</span><br><span class="line">   setAuthor: <span class="function"><span class="keyword">function</span> (<span class="params">author</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>._author = author || <span class="string">'No author specified'</span>;</span><br><span class="line">   &#125;,</span><br><span class="line">   display: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">//  ...</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是一种程序员约定俗成的方法，加下划线表示私有变量。但是 JS 中跟本没有私有变量的定义，只能说是总所周知的命名规范。缺点也很明显，既然是约定，那么只有在遵守时才有效果。</p>
</blockquote>
<h5 id="闭包实现私用成员"><a href="#闭包实现私用成员" class="headerlink" title="闭包实现私用成员"></a>闭包实现私用成员</h5><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = <span class="function"><span class="keyword">function</span> </span>(<span class="keyword">new</span><span class="type">Isbn</span>, <span class="keyword">new</span><span class="type">Title</span>, <span class="keyword">new</span><span class="type">Author</span>) &#123;</span><br><span class="line">   <span class="comment">//私有属性</span></span><br><span class="line">   <span class="keyword">var</span> isbn, title, author;</span><br><span class="line">   <span class="comment">// 私有方法</span></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">checkIsbn</span></span>(isbn) &#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">// 特权方法</span></span><br><span class="line">   <span class="built_in">this</span>.getIsbn = <span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">     <span class="keyword">return</span> isbn;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="built_in">this</span>.setIsbn = <span class="function"><span class="keyword">function</span> </span>(<span class="keyword">new</span><span class="type">Isbn</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (!checkIsbn(<span class="keyword">new</span><span class="type">Isbn</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">'Book:Invalid ISBN'</span>);</span><br><span class="line">     isbn = <span class="keyword">new</span><span class="type">Isbn</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="built_in">this</span>.getTitle = <span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">     <span class="keyword">return</span> title;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="built_in">this</span>.setTitle = <span class="function"><span class="keyword">function</span> </span>(<span class="keyword">new</span><span class="type">Title</span>) &#123;</span><br><span class="line">     title = <span class="keyword">new</span><span class="type">Title</span> || <span class="string">'NO title specified'</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="built_in">this</span>.getAuthor = <span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">     <span class="keyword">return</span> author;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="built_in">this</span>.setAuthor = <span class="function"><span class="keyword">function</span> </span>(<span class="keyword">new</span><span class="type">Author</span>) &#123;</span><br><span class="line">     author = <span class="keyword">new</span><span class="type">Author</span> || <span class="string">'NO author specified'</span>;</span><br><span class="line">   &#125;;</span><br><span class="line">   <span class="comment">//  构造函数 赋值</span></span><br><span class="line">   <span class="built_in">this</span>.setIsbn(<span class="keyword">new</span><span class="type">Isbn</span>);</span><br><span class="line">   <span class="built_in">this</span>.setTitle(<span class="keyword">new</span><span class="type">Title</span>);</span><br><span class="line">   <span class="built_in">this</span>.setAuthor(<span class="keyword">new</span><span class="type">Author</span>);</span><br><span class="line"> &#125;;</span><br><span class="line"><span class="comment">// 公共方法</span></span><br><span class="line"> Book.prototype = &#123;</span><br><span class="line">   display() &#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种方式创建的对象具有真正的私有属性，解决了可以直接取值赋值的问题。缺点是会耗费更多的内存，而且不利于派生子类。在 JS 中，用闭包实现私用成员导致的派生问题被称为”继承破坏封装“。</p>
</blockquote>
<h3 id="MORE"><a href="#MORE" class="headerlink" title="MORE"></a>MORE</h3><h5 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h5><blockquote>
<p>作用域和闭包可用于创建静态成员。大多数方法和属性所关联的是类的实例，而静态成员所关联的是类本身。</p>
</blockquote>
<ul>
<li>一个栗子</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Book = (<span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">  <span class="comment">// 私有静态属性</span></span><br><span class="line">  <span class="keyword">var</span> numOfBookes = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 私有静态方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">checkIsbn</span></span>(isbn) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 返回构造器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> </span>(<span class="keyword">new</span><span class="type">Isbn</span>, <span class="keyword">new</span><span class="type">Title</span>, <span class="keyword">new</span><span class="type">Author</span>) &#123;</span><br><span class="line">    <span class="comment">// 私有属性</span></span><br><span class="line">    <span class="keyword">var</span> isbn, title, author;</span><br><span class="line">    <span class="comment">// 特权方法</span></span><br><span class="line">    <span class="built_in">this</span>.getIsbn = <span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> isbn;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.setIsbn = <span class="function"><span class="keyword">function</span> </span>(<span class="keyword">new</span><span class="type">Isbn</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!checkIsbn(<span class="keyword">new</span><span class="type">Isbn</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">'Book:Invalid ISBN'</span>);</span><br><span class="line">      isbn = <span class="keyword">new</span><span class="type">Isbn</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.getTitle = <span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> title;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.setTitle = <span class="function"><span class="keyword">function</span> </span>(<span class="keyword">new</span><span class="type">Title</span>) &#123;</span><br><span class="line">      title = <span class="keyword">new</span><span class="type">Title</span> || <span class="string">'NO title specified'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.getAuthor = <span class="function"><span class="keyword">function</span> </span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> author;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">this</span>.setAuthor = <span class="function"><span class="keyword">function</span> </span>(<span class="keyword">new</span><span class="type">Author</span>) &#123;</span><br><span class="line">      author = <span class="keyword">new</span><span class="type">Author</span> || <span class="string">'NO author specified'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    numOfBookes++;</span><br><span class="line">    <span class="keyword">if</span> (numOfBookes &gt; <span class="number">50</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">'Book:Only 50 instance of book can be created.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值</span></span><br><span class="line">    <span class="built_in">this</span>.setIsbn(<span class="keyword">new</span><span class="type">Isbn</span>);</span><br><span class="line">    <span class="built_in">this</span>.setTitle(<span class="keyword">new</span><span class="type">Title</span>);</span><br><span class="line">    <span class="built_in">this</span>.setAuthor(<span class="keyword">new</span><span class="type">Author</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 公共静态方法</span></span><br><span class="line">Book.converToTitleCase = <span class="function"><span class="keyword">function</span> </span>(inputString) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 公共方法 非特权</span></span><br><span class="line">Book.prototype = &#123;</span><br><span class="line">  display:<span class="type">function</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>闭包，返回一个构造器，私用成员和特权成员仍然在构造器中。但是闭包中可以访问静态成员。优点在于所有的静态成员只会存在一份，这样大大减小了内存的消耗。<br>q：如何判断是否设计成静态成员？<br>a：一般情况下，我们只需要看一个属性或者方法是否需要访问实例数据。如果不需要，那么设计成静态成员会更有效率。</p>
</blockquote>
<h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><blockquote>
<p>常量的取值</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Class = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> constans = &#123;</span><br><span class="line">    UPPER_BOUND: <span class="number">100</span>,</span><br><span class="line">    LOWER_BOUND: <span class="number">-100</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> ctor = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 特权静态方法</span></span><br><span class="line">  ctor.getConstans = <span class="function"><span class="keyword">function</span> <span class="params">(name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> constans[name];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ctor</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line">Class.getConstans(<span class="string">'UPPER_BOUND'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>JS设计模式---5.单体模式</title>
    <url>/2018/12/12/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-5-%E5%8D%95%E4%BD%93%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="何为单体模式"><a href="#何为单体模式" class="headerlink" title="何为单体模式"></a>何为单体模式</h3><blockquote>
<p>单体是一个用来划分命名空间并将相关一批方法和属性组织在一起的对象，如果它可以被实例化，那么它只能被实例化一次。</p>
</blockquote>
 <a id="more"></a>
<h3 id="单体模式之利"><a href="#单体模式之利" class="headerlink" title="单体模式之利"></a>单体模式之利</h3><ul>
<li>调试维护轻松，利于理解</li>
<li>防止误改，提升网页稳定性</li>
<li>减少不必要的内存消耗（宽带消耗）</li>
</ul>
<h3 id="单体模式之弊"><a href="#单体模式之弊" class="headerlink" title="单体模式之弊"></a>单体模式之弊</h3><ul>
<li>会导致模块间的强耦合</li>
<li>不利于单元测试</li>
</ul>
<h3 id="认识单体及其应用"><a href="#认识单体及其应用" class="headerlink" title="认识单体及其应用"></a>认识单体及其应用</h3><h5 id="单体的基本结构"><a href="#单体的基本结构" class="headerlink" title="单体的基本结构"></a>单体的基本结构</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = &#123;</span><br><span class="line">  attribute1:<span class="literal">true</span>,</span><br><span class="line">  attribute2:<span class="number">10</span>,</span><br><span class="line">  method1:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  method2:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其实就是字面量对象，如果按照严格的定义来说，这并不能算一个单体，因为它不是一个可以实例化的类。</p>
</blockquote>
<h5 id="划分命名空间"><a href="#划分命名空间" class="headerlink" title="划分命名空间"></a>划分命名空间</h5><blockquote>
<p>单体对象由两个部分组成：包含着方法和属性成员的对象本身，以及用于访问它的变量。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findProduct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'555'</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> findProduct(); <span class="comment">// 555</span></span><br><span class="line"> <span class="keyword">var</span> findProduct = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'666'</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> findProduct() <span class="comment">//666</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>函数中声明变量时如果不使用 var 关键字，那么变量将被声明为全局性的。因此会干扰到全局命名空间中的其他代码</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MyNamespace = &#123;</span><br><span class="line">  findProduct:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//  ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 现在findProduct函数是MyNamespace中的一个方法，它不会被全局命名中声明的任何新变量改写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名空间还可以进异步分割，如下</span></span><br><span class="line"><span class="keyword">var</span> GiantCorp = &#123;&#125;;</span><br><span class="line">GiantCorp.Common = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">GiantCorp.ErrorCodes = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">GiantCorp.PageHandler = &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="用做特定网页专用代码的单体"><a href="#用做特定网页专用代码的单体" class="headerlink" title="用做特定网页专用代码的单体"></a>用做特定网页专用代码的单体</h5><blockquote>
<p>已经了解到如何把单体作为命名空间使用后，我们还需要知道单体模式的一个特殊用途。在拥有许多网页的网站中，有些 js 代码是所有网页都要用到的，他们通常被放在独立的文件中。比如我们经常用到的 jquery， lodash.js 等他们就是作专用代码的单体</p>
</blockquote>
<h5 id="拥有私用成员的单体"><a href="#拥有私用成员的单体" class="headerlink" title="拥有私用成员的单体"></a>拥有私用成员的单体</h5><h6 id="下划线表示法"><a href="#下划线表示法" class="headerlink" title="下划线表示法"></a>下划线表示法</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认GianCorp存在</span></span><br><span class="line"> GianCorp.DataParser = &#123;</span><br><span class="line">   <span class="comment">// 私有方法</span></span><br><span class="line">   _srtipWhitespace:<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> str.replace(<span class="regexp">/\s+/</span>,<span class="string">''</span>);</span><br><span class="line">   &#125;,</span><br><span class="line">   _stringSplit:<span class="function"><span class="keyword">function</span> (<span class="params">str,delimiter</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> str.split(delimiter)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 公用方法</span></span><br><span class="line">   srtingToArray:<span class="function"><span class="keyword">function</span>(<span class="params">str,delimiter,stripWs</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (stripWs) &#123;</span><br><span class="line">         str= <span class="keyword">this</span>._srtipWhitespace(str)</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">var</span> outputArray = <span class="keyword">this</span>._stringSplit(str,delimiter)</span><br><span class="line">       <span class="keyword">return</span> outputArray</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个栗子中的单体对象有一个公用方法 srtingToArray:function，它的主要工作靠_srtipWhitespace 和_stringSplit 这两个私有方法完成。将他们设计为私有方法，重构所有内部代码时就不必担心会殃及别人的程序。下划线这个标记前面也讲过，一般情况下是没有人调用它的。</p>
</blockquote>
<h6 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h6><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">MyNamespace.singleton= (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 私有成员</span></span><br><span class="line">    <span class="keyword">var</span> privateAttribute1 = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> privateAttribute2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">//公共成员</span></span><br><span class="line">      publicAttribute1:<span class="literal">true</span>,</span><br><span class="line">      publicAttribute2:<span class="number">10</span>,</span><br><span class="line">      publicMethod1:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      &#125;,</span><br><span class="line">      publicMethod2:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这种单体模式又称模块模式，指的是它可以吧一批相关方法和属性组织为模块并起到划分命名空间的作用。<br>这种模式与下划线表示法相比有亟待呢优势。把私有成员放到闭包中可以确保其不会在单体对象之外被使用。你可以自由地改变对象的实现细节，还不会殃及比尔的代码。还可以用这种方法对数据进行保护和封装。</p>
</blockquote>
<h5 id="惰性实例化"><a href="#惰性实例化" class="headerlink" title="惰性实例化"></a>惰性实例化</h5><blockquote>
<p>前面所讲的单体模式的各种实现方式有一个共同点：单体对象都是在脚本加载时被创建出来。对于资源密集型的或配置开销甚大的单体，更合理的做法是将其实例化推迟到需要使用它的时候。这种技术被称为惰性加载。</p>
</blockquote>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">MyNamespace.singleton= (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> uniqueInstance;  <span class="comment">//实例</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">constructor</span><span class="params">()</span> </span>&#123;  <span class="comment">//构造器 （最终返回的单体）</span></span><br><span class="line">    <span class="comment">// 私有成员</span></span><br><span class="line">    <span class="keyword">var</span> privateAttribute1 = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> privateAttribute2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="comment">//公共成员</span></span><br><span class="line">      publicAttribute1:<span class="literal">true</span>,</span><br><span class="line">      publicAttribute2:<span class="number">10</span>,</span><br><span class="line">      publicMethod1:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      &#125;,</span><br><span class="line">      publicMethod2:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getInstance:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!uniqueInstance) &#123;   <span class="comment">// 判断实例存不存在</span></span><br><span class="line">        uniqueInstance = constructor()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> uniqueInstance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;)()</span><br><span class="line"> <span class="comment">// 使用</span></span><br><span class="line"> <span class="comment">//   MyNamespace.singleton.publicMethod1()   before</span></span><br><span class="line"> MyNamespace.singleton.getInstance().publicMethod1()  <span class="comment">//after</span></span><br></pre></td></tr></table></figure>
<h5 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">MyNamespace.singleton= (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">       <span class="comment">//...</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> (someCondition)?obj1:obj2</span><br><span class="line">  &#125;)()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>主要做兼容用</p>
</blockquote>
]]></content>
      <tags>
        <tag>JS设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JS设计模式---6.工厂模式</title>
    <url>/2018/12/18/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-6-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h3><h5 id="动态实现"><a href="#动态实现" class="headerlink" title="动态实现"></a>动态实现</h5><blockquote>
<p>与一系列实现了同一接口、可以被同等对待的类打交道时，需要使用工厂模式</p>
</blockquote>
 <a id="more"></a>
<h5 id="节省设置开销"><a href="#节省设置开销" class="headerlink" title="节省设置开销"></a>节省设置开销</h5><blockquote>
<p>如果对象需要进行复杂并且彼此相关的设置，那么使用工厂模式可以减少每种对象所需要的代码量。它可以在实例化所需要的对象之前先一次性的进行设置。<br>如果所用的类要求加载外部库的话，工厂方法可以对这这些库进行检查并动态加载那些未找到的库</p>
</blockquote>
<h5 id="用许多小对象组成一个大对象"><a href="#用许多小对象组成一个大对象" class="headerlink" title="用许多小对象组成一个大对象"></a>用许多小对象组成一个大对象</h5><blockquote>
<p>工厂方法可以用来创建封装了许多小对象的对象。如果你不想让某个子系统与比较大的那个对象之间形成强耦合，而是想在运行时从许多子系统中进行挑选的话，那么使用工厂方法是比较理想的选择。</p>
</blockquote>
<h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><blockquote>
<p>假设你想开几个自行车商店，每个店都有几种型号的自行车出售。这可以用一个类来表示</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BicycleFactory  单体</span></span><br><span class="line"> <span class="keyword">var</span> BicycleFactory = &#123;</span><br><span class="line">   createBicycle: <span class="function"><span class="keyword">function</span> (<span class="params">model</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> bicycle;</span><br><span class="line">     <span class="keyword">switch</span> (model) &#123;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">'The Speedster'</span>:</span><br><span class="line">         bicycle = <span class="keyword">new</span> Speedster();</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">'The Lowrider'</span>:</span><br><span class="line">         bicycle = <span class="keyword">new</span> Lowrider();</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">       <span class="keyword">case</span> <span class="string">'The Comfort Cruiser'</span>:</span><br><span class="line">       <span class="keyword">default</span>:</span><br><span class="line">         bicycle = <span class="keyword">new</span> ComfortCruiser</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     interface.ensureImplements(bicycle,Bicycle);</span><br><span class="line">     <span class="keyword">return</span> bicycle</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//  BicycleShop class</span></span><br><span class="line"> <span class="keyword">var</span> BicycleShop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"> BicycleShop.prototype = &#123;</span><br><span class="line">   <span class="comment">// sellBicycle根据所要求的自行车型号创建一个自行车实例，各种型号的实例可以互换使用，因为它们都实现了Bicycle接口</span></span><br><span class="line">   sellBicycle:<span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> bicycle = BicycleFactory.createBicycle(model);</span><br><span class="line">     bicycle.assemble();</span><br><span class="line">     bicycle.wash();</span><br><span class="line">     <span class="keyword">return</span> bicycle</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// Bicycle接口</span></span><br><span class="line"> <span class="keyword">var</span> Bicycle = <span class="keyword">new</span> Interface(<span class="string">'Bicycle'</span>,[<span class="string">'assemble'</span>,<span class="string">'wash'</span>,<span class="string">'ride'</span>,<span class="string">'repair'</span>]);</span><br><span class="line"> <span class="comment">// Speedster class</span></span><br><span class="line"> <span class="keyword">var</span> Speedster = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"> Speedster.prototype = &#123;</span><br><span class="line">   assemble: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">   &#125;,</span><br><span class="line">   wash: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">   &#125;,</span><br><span class="line">   ride:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">   &#125;,</span><br><span class="line">   repair:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>BicycleFactory 就是简单工厂的一个例子。这种模式把成员对象的创建工作转交给一个外部对象。这个外部对象可以像本例是一个简单的命名空间，也可以是一个类的实例。</p>
</blockquote>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><blockquote>
<p>真正的工厂模式与简单工厂模式的区别在于，它不是另外使用一个类或对象来创建自行车，而是使用一个子类。<br>按照正式定义，工厂是一个将其成员对象的实例化推迟到子类中进行的类。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// BicycleShop class (抽象类)</span></span><br><span class="line"><span class="keyword">var</span> BicycleShop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">BicycleShop.prototype = &#123;</span><br><span class="line">   sellBicycle:<span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">var</span> bicycle = <span class="keyword">this</span>.createBicycle(model);</span><br><span class="line">     bicycle.assemble();</span><br><span class="line">     bicycle.wash();</span><br><span class="line">     <span class="keyword">return</span> bicycle;</span><br><span class="line">  &#125;,</span><br><span class="line">  createBicycle:<span class="function"><span class="keyword">function</span>(<span class="params">model</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 抛出错误 不能在抽象类中实例化</span></span><br><span class="line">     <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Unsupported operation on an abstract class'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设计一个经销特定自行车生产厂家产品的子类需要扩展BicycleShop 重新定义其中的createBicycle方法 下面为两个子类 其中一个子类代表的商店从Acme公司进货 另一个从General Products 公司进货</span></span><br><span class="line"><span class="comment">// AcmeBicycleShop class</span></span><br><span class="line"><span class="keyword">var</span> AcmeBicycleShop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">extend(AcmeBicycleShop,BicycleShop);  <span class="comment">// 继承</span></span><br><span class="line">AcmeBicycleShop.prototype.createBicycle = <span class="function"><span class="keyword">function</span> (<span class="params">model</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bicycle;</span><br><span class="line">  <span class="keyword">switch</span> (model) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'The Speedster'</span>:</span><br><span class="line">      bicycle = <span class="keyword">new</span> AmceSpeedster();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">'The Comfort Cruiser'</span>:</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">       bicycle =<span class="keyword">new</span> AmceComfortCruiser();</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Interface.ensureImplements(bicycle,Bicycle);</span><br><span class="line">  <span class="keyword">return</span> bicycle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// GeneraProductsBicycleShop class</span></span><br><span class="line"><span class="keyword">var</span> GeneraProductsBicycleShop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">extend(GeneraProductsBicycleShop,BicycleShop)； <span class="comment">//继承</span></span><br><span class="line">GeneraProductsBicycleShop.prototype.createBicycle = <span class="function"><span class="keyword">function</span> (<span class="params">model</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bicycle;</span><br><span class="line">  <span class="keyword">switch</span> (model) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'The Speedster'</span>:</span><br><span class="line">      bicycle = <span class="keyword">new</span> GeneraProductsSpeedster();</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="string">'The Comfort Cruiser'</span>:</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">       bicycle =<span class="keyword">new</span> GeneraProductsComfortCruiser();</span><br><span class="line">       <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Interface.ensureImplements(bicycle,Bicycle);</span><br><span class="line">  <span class="keyword">return</span> bicycle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这些工厂方法生成的对象都实现了Bicycle接口，所以在其它代码眼里他们完全可以互换</span></span><br><span class="line"><span class="comment">// 销售工作还是一样 只是现在所开的商店可以是Amce或者General Products自行车专卖店</span></span><br><span class="line"><span class="keyword">var</span> alecsCruisers = <span class="keyword">new</span> AcmeBicycleShop();</span><br><span class="line"><span class="keyword">var</span> yourNewBike = alecsCruisers.createBicycle(<span class="string">'The Speedster'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bobsCruisers = <span class="keyword">new</span> GeneraProductsBicycleShop();</span><br><span class="line"><span class="keyword">var</span> yourSecondNewBike = bobsCruisers.createBicycle(<span class="string">'The Speedster'</span>)</span><br><span class="line"><span class="comment">// 增加对其他生产厂家的支持也很简单，只要再创建一个BicycleShop的子类并重新定义其createBicycle方法即可。 一般性的代码被集中在一个位置，而个体性的代码则被封装在子类中</span></span><br></pre></td></tr></table></figure>
<h3 id="一个栗子-XHR-工厂"><a href="#一个栗子-XHR-工厂" class="headerlink" title="一个栗子 (XHR 工厂)"></a>一个栗子 (XHR 工厂)</h3><ul>
<li>简单工厂</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AjaxHandler 接口</span></span><br><span class="line"><span class="keyword">var</span> AjaxHandler = <span class="keyword">new</span> Interface(<span class="string">'AjaxHandler'</span>,[<span class="string">'request'</span>,<span class="string">'createXhrObject'</span>]);</span><br><span class="line"><span class="comment">// SimpleHandler classs</span></span><br><span class="line"><span class="keyword">var</span> SimpleHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">SimpleHandler.prototype = &#123;</span><br><span class="line">  <span class="comment">// reuqest 负责执行发出请求和处理响应结果所需要的一系列操作</span></span><br><span class="line">  request:<span class="function"><span class="keyword">function</span>(<span class="params">method,url,callback,postVars</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">this</span>.createXhrObject;</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState !== <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">      (xhr.status ===<span class="number">200</span> )?</span><br><span class="line">      callback.success(xhr.reponseText,xhr.responseXML):</span><br><span class="line">      callback.failure(xhr.status)</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.open(method,url,<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (method !== <span class="string">'POST'</span>) postVars = <span class="literal">null</span>;</span><br><span class="line">    xhr.send(postVars);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// caeateXhrObject 根据当前环境的具体情况返回一个XHR对象。在首次执行时，它会一次尝试三种用于创建XHR对象的不同方法，一旦遇到一种管用的它就回返回所创建的对象并将自身改为可以用以创建的哪个对象的函数。</span></span><br><span class="line">  <span class="comment">//这种技术叫做memoizing，它可以提高代码的效率，因为所有设置的检测代码都只会执行一次。</span></span><br><span class="line">  caeateXhrObject:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> methods = [</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'Msxml2.XMLHttpRequest'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">        methods[i]()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span>&#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.caeateXhrObject = methods[i];</span><br><span class="line">      <span class="keyword">return</span> methods[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'SimpleHandler: Could not create an XHR objece'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> myHandler = <span class="keyword">new</span> SimpleHandler();</span><br><span class="line"><span class="keyword">var</span> callback = &#123;</span><br><span class="line">  success:<span class="function"><span class="keyword">function</span>(<span class="params">reponseText</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  failure:<span class="function"><span class="keyword">function</span>(<span class="params">statusCode</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myHandler.request(<span class="string">'GET'</span>,<span class="string">'script.php'</span>,callback)</span><br></pre></td></tr></table></figure>
<ul>
<li>专用型连接对象<blockquote>
<p>这个栗子可以进一步扩展，把工厂模式用在两个地方，以便根据网络条件创建专门的请求对象。<br>QueueHandler 会在发起新的请求之前先确保所有的请求都已经成功处理，而 OfflineHandler 则会在用户处于离线状态时把请求缓存起来。</p>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// QueueHandler class 在发起新的请求之前先确保所有请求已经成功处理</span></span><br><span class="line"><span class="keyword">var</span> QueueHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.queue = [];</span><br><span class="line">  <span class="keyword">this</span>.requestInProgress = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">this</span>.retryDelay = <span class="number">5</span> <span class="comment">// 秒</span></span><br><span class="line">&#125;</span><br><span class="line">extend(QueueHandler,SimpleHandler);</span><br><span class="line">QueueHandler.prototype.request = <span class="function"><span class="keyword">function</span> (<span class="params">method,url,callback,postVars,override</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.requestInProgress &amp;&amp; !override) &#123;  <span class="comment">// 如果有请求没有处理成功，把本次请求暂存</span></span><br><span class="line">      <span class="keyword">this</span>.queue.push(&#123;</span><br><span class="line">        method,</span><br><span class="line">        url,</span><br><span class="line">        callback,</span><br><span class="line">        postVars</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;  <span class="comment">// 如果所有请求都已成功 发送本次请求</span></span><br><span class="line">    <span class="keyword">this</span>.requestInProgress = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">this</span>.createXhrObject();</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.readyState !== <span class="number">4</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        callback.success(xhr.reponseText,xhr.responseXML);</span><br><span class="line">        that.advanceQueue();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">        callback.failure(xhr.status);</span><br><span class="line">        <span class="comment">// 5s后再次发起请求</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          that.request(method,url,callback,postVars,<span class="literal">true</span>)</span><br><span class="line">        &#125;, that.retryDelay*<span class="number">1000</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.open(method,url,<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (method !== <span class="string">'POST'</span>) postVars = <span class="literal">null</span>;</span><br><span class="line">    xhr.send(postVars)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">QueueHandler.prototype.advanceQueue = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.queue.length !== <span class="number">0</span>) &#123;  <span class="comment">// 如果暂存列表为空 结束本次函数</span></span><br><span class="line">    <span class="keyword">this</span>.requestInProgress = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> req = <span class="keyword">this</span>.queue.shift();   <span class="comment">// 如果不为空 发起暂存列表的第一个请求</span></span><br><span class="line">  <span class="keyword">this</span>.request(req.method,req.url,req.callback,req.postVars,<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OfflineHandler calss</span></span><br><span class="line"><span class="keyword">var</span> OfflineHandler = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.storedRequests = [];</span><br><span class="line">&#125;;</span><br><span class="line">extend(OfflineHandler,SimpleHandler);</span><br><span class="line">OfflineHandler.prototype.request = <span class="function"><span class="keyword">function</span> (<span class="params">method,url,callback,postVars</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (XhrManager.isOffline()) &#123;   <span class="comment">// XhrManager.isOffline方法判断是否离线</span></span><br><span class="line">    <span class="keyword">this</span>.storedRequests.push(&#123;</span><br><span class="line">      method,</span><br><span class="line">      url,</span><br><span class="line">      callback,</span><br><span class="line">      postVars</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.flusStoredRequests();</span><br><span class="line">    <span class="comment">// 调用超类（也就是父类）的request方法</span></span><br><span class="line">    OfflineHandler.superclass.request(method,url,callback,postVars)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">OfflineHandler.prototype.flusStoredRequests = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; storedRequests.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> req = storedRequests[i];</span><br><span class="line">    OfflineHandler.superclass.request(req.method,req.url,req.callback,req.postVars)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在运行时选择连接对象（工厂模式）<blockquote>
<p>因为程序员根本不可能知道各个最终用户实际面临的网络条件，所以不可能要求他们在开发中选择使用那个处理器类，而是应该用一个工厂在运行时选择最合适的类</p>
</blockquote>
</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// XhrManager 单例</span></span><br><span class="line"><span class="keyword">var</span> XhrManager = &#123;</span><br><span class="line">  createXhrHandler:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isOffline()) &#123;</span><br><span class="line">      xhr = <span class="keyword">new</span> OfflineHandler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.isHighLatency()) &#123;</span><br><span class="line">      xhr = <span class="keyword">new</span> QueueHandler();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      xhr = <span class="keyword">new</span> SimpleHandler();</span><br><span class="line">    &#125;</span><br><span class="line">    Interface.ensureImplements(xhr,AjaxHandler);</span><br><span class="line">    <span class="keyword">return</span> xhr</span><br><span class="line">  &#125;,</span><br><span class="line">  isOffline:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//...   判断是否离线</span></span><br><span class="line">  &#125;,</span><br><span class="line">  isHighLatency:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//..  判断是否高延迟</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> myHandler = XhrManager.createXhrHandler();</span><br><span class="line"><span class="keyword">var</span> callback = &#123;</span><br><span class="line">  success:<span class="function"><span class="keyword">function</span><span class="params">(responseText)</span></span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  failure:<span class="function"><span class="keyword">function</span><span class="params">(statusCode)</span></span>&#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">myHandler.request(<span class="string">'GET'</span>,<span class="string">'script.php'</span>,callback)</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>简单工厂通常另外使用一个类或者对象封装实例化操作，而真正的工厂模式则需要实现一个抽象的工厂方法并把实例化工作推迟到子类中进行。<br>工厂模式可以弱化对象间的耦合，防止代码重复。</p>
</blockquote>
]]></content>
      <tags>
        <tag>JS设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JS设计模式---7.桥接模式</title>
    <url>/2018/12/19/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-7-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="适用场合及栗子"><a href="#适用场合及栗子" class="headerlink" title="适用场合及栗子"></a>适用场合及栗子</h3><ul>
<li>事件监听器<blockquote>
<p>假设有一个名为 getBeerById 的 API 函数。它根据一个标识符返回有关某种啤酒的信息。我们来给一个事件监听用户操作</p>
</blockquote>
</li>
</ul>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bad</span></span><br><span class="line">addEvent(Element,<span class="string">'click'</span>,getBeerById)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBeerById</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 事件对象被作为参数传递给函数，而本例并没有使用这个参数，只是从this对象中获取id</span></span><br><span class="line">  <span class="keyword">var</span> id = <span class="keyword">this</span>.id;</span><br><span class="line">  asyncRequest(<span class="string">'GET'</span>,<span class="string">`beer.uri?id=<span class="subst">$&#123;id&#125;</span>`</span>,<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">`Request Beer:<span class="subst">$&#123;res.responseText&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBeerById</span>(<span class="params">id,callback</span>) </span>&#123;</span><br><span class="line">  asyncRequest(<span class="string">'GET'</span>,<span class="string">`beer.uri?id=<span class="subst">$&#123;id&#125;</span>`</span>,<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 回调 传入返回值</span></span><br><span class="line">    callback(res.responseText)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">addEvent(Element,<span class="string">'click'</span>,getBeerByIdBridge)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBeerByIdBridge</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 把id作为参数传递给getBeerById函数是合情合理的，这里使用一个回调函数把回应结果返回 现在我们将针对接口而不是实现进行编程</span></span><br><span class="line">  getBeerById(<span class="keyword">this</span>.id,<span class="function"><span class="keyword">function</span> (<span class="params">beer</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Request Beer:<span class="subst">$&#123;res.responseText&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>我们用了两种方式来实现，第一种方式把事件对象与 getBeerById 捆绑在一起，那么它只在本次事件中适用。第二种方式使用桥接模式把抽象隔离开来后，getBeerById 函数不再和事件对象捆绑在一起，也就扩大了它的适用范围</p>
</blockquote>
<ul>
<li>特权函数</li>
</ul>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">var Public = function () &#123;</span><br><span class="line">   var<span class="built_in"> secret </span>= 3;</span><br><span class="line">   this.privilegedGetter = function () &#123;</span><br><span class="line">     return secret</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> var o = new Public();</span><br><span class="line"> var data = o.privilegedGetter();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>利用桥接函数来实现公共成员对私有成员的访问和操作 详见<a href="http://xhui.top/2018/12/10/JS设计模式-3-封装/" target="_blank" rel="noopener">封装</a></p>
</blockquote>
<ul>
<li>连接多个类</li>
</ul>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> class1 = <span class="function"><span class="keyword">function</span> <span class="params">(a,b,c)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = a;</span><br><span class="line">  <span class="keyword">this</span>.b = b;</span><br><span class="line">  <span class="keyword">this</span>.c = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> class2 = <span class="function"><span class="keyword">function</span> <span class="params">(d)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.d = d</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> BridgeClass = <span class="function"><span class="keyword">function</span> <span class="params">(a,b,c,d)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.one = <span class="keyword">new</span> class1(a,b,c);</span><br><span class="line">  <span class="keyword">this</span>.two = <span class="keyword">new</span> clsaa2(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这看起来很像适配器，但是本例中实际上并没有客户系统要求提供数据，它只不过是用来接纳数据并转发给责任方的一种辅助性手段。<br>有人可能会觉得这个桥接类实际上就是一个门面类。但是这里与门面类不同，使用桥接模式是为了让 class1 和 class2 能够独立于 BrigeClass 而发生改变。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>桥接模式主要的作用是将抽象与其实现隔离开来，以便二者独立变化，互不影响。<br>桥接模式的好处就在于能够独立管理你项目的各个组成部分，可以促进代码的模块化，促成更简洁的实现并提高抽象的灵活性。<br>只有某一处调用的函数如果用桥接的话，代码就会变得累赘了。而且增加了函数的调用，可能会对性能造成一些影响。</p>
</blockquote>
]]></content>
      <tags>
        <tag>JS设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JS设计模式---8.组合模式</title>
    <url>/2018/12/20/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-8-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="组合模式是什么"><a href="#组合模式是什么" class="headerlink" title="组合模式是什么"></a>组合模式是什么</h3><blockquote>
<p>组合模式又叫整体模式。它把一批子对象组织为树形结构，只要一条命令就可以操作树中的所有对象</p>
</blockquote>
 <a id="more"></a>
<h3 id="组合模式之利"><a href="#组合模式之利" class="headerlink" title="组合模式之利"></a>组合模式之利</h3><ul>
<li>耦合低，利于重构</li>
<li>减少代码量</li>
<li>节点自由度高</li>
</ul>
<h3 id="组合模式之弊"><a href="#组合模式之弊" class="headerlink" title="组合模式之弊"></a>组合模式之弊</h3><ul>
<li>层次较大时，性能会受到影响</li>
</ul>
<h3 id="组合对象的结构"><a href="#组合对象的结构" class="headerlink" title="组合对象的结构"></a>组合对象的结构</h3><p><img src="https://s2.ax1x.com/2019/09/26/umFugf.png" alt="组合对象"><br>如上图所示，组合对象的层次体系中有两种类型的对象：叶对象和组合对象。一个组合对象由别的组合对象和叶对象组成，而叶对象不再有子对象。<br>叶对象是组合对象的基本元素，也是各种操作的落实地点。</p>
<h3 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h3><ul>
<li>存在一批组织成某种层次体系的对象（具体的结构再开发期间无法得知）</li>
<li>希望对这批对象或其中的一部分对象实施一个操作</li>
</ul>
<h3 id="一个栗子"><a href="#一个栗子" class="headerlink" title="一个栗子"></a>一个栗子</h3><blockquote>
<p>假设你的任务是创建一个图片库。我们希望能构有选择的隐藏或显示图片库的特定功能。这可能是单独的图片，也可能是图片库。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先我们创建图片库类  也就是组合对象</span></span><br><span class="line"> <span class="keyword">var</span> DynamicGallery = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.children = [];   <span class="comment">// 图片容器</span></span><br><span class="line">   <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">   <span class="keyword">this</span>.element.id = id;</span><br><span class="line">   <span class="keyword">this</span>.element.className = <span class="string">'dynamic-gallery'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> DynamicGallery.prototype = &#123;</span><br><span class="line">   add:<span class="function"><span class="keyword">function</span>(<span class="params">child</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.children.push(child);</span><br><span class="line">     <span class="keyword">this</span>.element.appendChild(child.getElement())</span><br><span class="line">   &#125;,</span><br><span class="line">   remove:<span class="function"><span class="keyword">function</span> (<span class="params">child</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> node, i = <span class="number">0</span>; node = <span class="keyword">this</span>.getChild(i); i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node == child) &#123;</span><br><span class="line">         <span class="keyword">this</span>.children.splice(i,<span class="number">1</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">this</span>.element.removeChild(child.getElement());</span><br><span class="line">   &#125;,</span><br><span class="line">   getChild:<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.children[i];</span><br><span class="line">   &#125;,</span><br><span class="line">   hide:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> node,i = <span class="number">0</span>; node = <span class="keyword">this</span>.getChild(i); i++) &#123;</span><br><span class="line">       node.hide();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">this</span>.element.style.display = <span class="string">'none'</span>;</span><br><span class="line">   &#125;,</span><br><span class="line">   show:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.element.style.display = <span class="string">'block'</span>;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> node,i = <span class="number">0</span>; node = <span class="keyword">this</span>.getChild(i); i++) &#123;</span><br><span class="line">       node.show();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   getElement:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.element;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 然后创建图片本身的类  也就是叶对象</span></span><br><span class="line"> <span class="keyword">var</span> GalleryImage = <span class="function"><span class="keyword">function</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>.element = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">   <span class="keyword">this</span>.element.className = <span class="string">'gallery-image'</span>;</span><br><span class="line">   <span class="keyword">this</span>.element.src = src;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> GalleryImage.prototype = &#123;</span><br><span class="line">   add:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">   remove:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">   getChild:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">   hide:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.element.style.display = <span class="string">'none'</span></span><br><span class="line">   &#125;,</span><br><span class="line">   show()&#123;</span><br><span class="line">     <span class="keyword">this</span>.element.style.display = <span class="string">''</span></span><br><span class="line">   &#125;,</span><br><span class="line">   getElement:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">this</span>.element;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 使用</span></span><br><span class="line"> <span class="keyword">var</span> topGallery = <span class="keyword">new</span> DynamicGallery(<span class="string">'top-gallery'</span>);</span><br><span class="line"> <span class="keyword">var</span> a = <span class="keyword">new</span> GalleryImage(<span class="string">'./01.png'</span>)</span><br><span class="line"> topGallery.add(a)</span><br><span class="line"> <span class="built_in">document</span>.body.appendChild(topGallery.element)</span><br></pre></td></tr></table></figure>
<p>运行后我们的页面结构为<br><img src="https://s2.ax1x.com/2019/09/26/umFrVJ.png" alt="html"><br>显示和隐藏也是没有问题的。</p>
]]></content>
      <tags>
        <tag>JS设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>JS设计模式---9.门面模式</title>
    <url>/2018/12/21/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-9-%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="门面模式是什么"><a href="#门面模式是什么" class="headerlink" title="门面模式是什么"></a>门面模式是什么</h3><blockquote>
<p>外部与一个子系统的通信必须通过一个系统的一个门面对象进行，这就是门面模式。 它有两个作用，一是简化类的接口，二是消除类与使用它的客户代码的耦合</p>
</blockquote>
 <a id="more"></a>
<h3 id="门面模式之利"><a href="#门面模式之利" class="headerlink" title="门面模式之利"></a>门面模式之利</h3><ul>
<li>简化接口</li>
<li>减少与子系统的耦合</li>
<li>降低对外部代码的依赖</li>
</ul>
<h3 id="门面模式之弊"><a href="#门面模式之弊" class="headerlink" title="门面模式之弊"></a>门面模式之弊</h3><ul>
<li>不符合开闭原则，对扩展开发，对修改关闭</li>
</ul>
<h3 id="适用场合"><a href="#适用场合" class="headerlink" title="适用场合"></a>适用场合</h3><ul>
<li>事件监听器</li>
</ul>
<figure class="highlight sml"><table><tr><td class="code"><pre><span class="line">function addEvent(el,<span class="keyword">type</span>,<span class="keyword">fn</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (window.addEventListener) &#123;</span><br><span class="line">       el.addEventListener(<span class="keyword">type</span>,<span class="keyword">fn</span>,<span class="literal">false</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (window.attachEvent) &#123;</span><br><span class="line">       el.attachEvent(<span class="symbol">'on'</span>+<span class="keyword">type</span> , <span class="keyword">fn</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>&#123;</span><br><span class="line">       el[<span class="symbol">'on'</span>+<span class="keyword">type</span>] = <span class="keyword">fn</span>;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>js 库<blockquote>
<p>JavaScript 库是人为设计的。设计它们的目的在于节省时间、简化常见任务和提供比每个浏览器都实现了的内置 JavaScript 函数更易于使用的接口。</p>
</blockquote>
</li>
<li>便利方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> DED = <span class="built_in">window</span>.DED || &#123;&#125;;</span><br><span class="line">DED.util = &#123;</span><br><span class="line">   <span class="comment">//阻止冒泡</span></span><br><span class="line">  stopPropagation:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.stopPropagation) &#123;</span><br><span class="line">      e.stopPropagation</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      e.cancelBubble = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">   <span class="comment">// 阻止默认行为</span></span><br><span class="line">  preventDefault:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.preventDefault) &#123;</span><br><span class="line">      e.preventDefault()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      e.returnValue = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  stopEvent:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    DED.util.stopPropagation(e);</span><br><span class="line">    DED.util.preventDefault(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="一个栗子"><a href="#一个栗子" class="headerlink" title="一个栗子"></a>一个栗子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例如想要将ID为content的div元素的文本颜色设置为红色，可以使用下面的代码</span></span><br><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span><br><span class="line">element.style.color = <span class="string">'red'</span>;</span><br><span class="line"><span class="comment">// 现在假设要一次设置几个元素的某个样式。如果有三个ID分别为foo、bar和baz的元素，并且想把它们的文本颜色设置为红色 可以这样做</span></span><br><span class="line"><span class="keyword">var</span> element1 = <span class="built_in">document</span>.getElementById(<span class="string">'foo'</span>)</span><br><span class="line">element1.style.color = <span class="string">'red'</span></span><br><span class="line"><span class="keyword">var</span> element2 = <span class="built_in">document</span>.getElementById(<span class="string">'bar'</span>)</span><br><span class="line">element2.style.color = <span class="string">'red'</span></span><br><span class="line"><span class="keyword">var</span> element3 = <span class="built_in">document</span>.getElementById(<span class="string">'baz'</span>)</span><br><span class="line">element3.style.color = <span class="string">'red'</span></span><br><span class="line"><span class="comment">// 这样不停的写getElementById并且为每一个元素设置同样的属性和值不够优雅。</span></span><br><span class="line"><span class="comment">// 为了代码更加优雅，我们来写一个门面元素来简化我们的工作。</span></span><br><span class="line">setStyle([<span class="string">'foo'</span>,<span class="string">'bar'</span>,<span class="string">'baz'</span>],<span class="string">'color'</span>,<span class="string">'red'</span>);</span><br><span class="line"><span class="comment">//  逆向思维  先写出怎么用  然后再来设计这个函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyle</span>(<span class="params">elements,prop,val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(elements[i]).style[prop] = val;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我们还可以设计一个更复杂的接口，把所有逻辑都组合在另一个门面元素中。以便一次调用就可以处理所有问题 我们把它命名为setCSS</span></span><br><span class="line">setCSS([<span class="string">'foo'</span>],&#123;</span><br><span class="line">  positon:<span class="string">"absolute"</span>,</span><br><span class="line">  top:<span class="string">"50px"</span>,</span><br><span class="line">  left:<span class="string">"300px"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCss</span>(<span class="params">el,styles</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> styles) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!styles.hasOwmProperty(prop)) <span class="keyword">continue</span>;</span><br><span class="line">    setStyle(el,prop,styles[prop])</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 现在我们就可以像这样一次设置多个元素的多个样式</span></span><br><span class="line">setCSS([<span class="string">'foo'</span>,<span class="string">'bar'</span>,<span class="string">'baz'</span>],&#123;</span><br><span class="line">  color:<span class="string">"red"</span>,</span><br><span class="line">  background:<span class="string">"black"</span>,</span><br><span class="line">  fontSize:<span class="string">"16px"</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JS设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE2+IVIEW 兼容ie9配置记录</title>
    <url>/2019/07/24/VUE2+IVIEW%20%E5%85%BC%E5%AE%B9ie9%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<ul>
<li><p>js 兼容 man.js 导入即可</p>
<a id="more"></a>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Number</span>.parseInt === <span class="literal">undefined</span>) <span class="built_in">Number</span>.parseInt = <span class="built_in">window</span>.parseInt;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Number</span>.parseFloat === <span class="literal">undefined</span>) <span class="built_in">Number</span>.parseFloat = <span class="built_in">window</span>.parseFloat;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">window</span>.HTMLElement) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.getOwnPropertyNames(HTMLElement.prototype).indexOf(<span class="string">'dataset'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(HTMLElement.prototype, <span class="string">'dataset'</span>, &#123;</span><br><span class="line">        <span class="keyword">get</span>: function () &#123;</span><br><span class="line">          <span class="keyword">var</span> attributes = <span class="keyword">this</span>.attributes; <span class="comment">// 获取节点的所有属性</span></span><br><span class="line">          <span class="keyword">var</span> name = [];</span><br><span class="line">          <span class="keyword">var</span> value = []; <span class="comment">// 定义两个数组保存属性名和属性值</span></span><br><span class="line">          <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 定义一个空对象</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; attributes.length; i++) &#123; <span class="comment">// 遍历节点的所有属性</span></span><br><span class="line">            <span class="keyword">if</span> (attributes[i].nodeName.slice(<span class="number">0</span>, <span class="number">5</span>) === <span class="string">'data-'</span>) &#123; <span class="comment">// 如果属性名的前面5个字符符合"data-"</span></span><br><span class="line">              <span class="comment">// 取出属性名的"data-"的后面的字符串放入name数组中</span></span><br><span class="line">              name.push(attributes[i].nodeName.slice(<span class="number">5</span>));</span><br><span class="line">              <span class="comment">// 取出对应的属性值放入value数组中</span></span><br><span class="line">              value.push(attributes[i].nodeValue);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; name.length; j++) &#123; <span class="comment">// 遍历name和value数组</span></span><br><span class="line">            obj[name[j]] = value[j]; <span class="comment">// 将属性名和属性值保存到obj中</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> obj; <span class="comment">// 返回对象</span></span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="string">'classList'</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement)) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(HTMLElement.prototype, <span class="string">'classList'</span>, &#123;</span><br><span class="line">      <span class="keyword">get</span>: function () &#123;</span><br><span class="line">        <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> classes = self.className.split(<span class="regexp">/\s+/g</span>);</span><br><span class="line">            <span class="keyword">var</span> index = classes.indexOf(value);</span><br><span class="line"></span><br><span class="line">            fn(classes, index, value);</span><br><span class="line">            self.className = classes.join(<span class="string">' '</span>);</span><br><span class="line">          &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          add: update(<span class="function"><span class="keyword">function</span> (<span class="params">classes, index, value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!~index) classes.push(value);</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">          remove: update(<span class="function"><span class="keyword">function</span> (<span class="params">classes, index</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (~index) classes.splice(index, <span class="number">1</span>);</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">          toggle: update(<span class="function"><span class="keyword">function</span> (<span class="params">classes, index, value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (~index) &#123;</span><br><span class="line">              classes.splice(index, <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              classes.push(value);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;),</span><br><span class="line"></span><br><span class="line">          contains: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !!~self.className.split(<span class="regexp">/\s+/g</span>).indexOf(value);</span><br><span class="line">          &#125;,</span><br><span class="line">          item: <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> self.className.split(<span class="regexp">/\s+/g</span>)[i] || <span class="literal">null</span>;</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// window.requestAnimationFrame多浏览器兼容问题补丁</span></span><br><span class="line">  <span class="comment">// http://paulirish.com/2011/requestanimationframe-for-smart-animating/</span></span><br><span class="line">  <span class="comment">// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating</span></span><br><span class="line">  <span class="comment">// requestAnimationFrame polyfill by Erik Möller. fixes from Paul Irish and Tino Zijdel</span></span><br><span class="line">  <span class="comment">// MIT license</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> vendors = [<span class="string">'ms'</span>, <span class="string">'moz'</span>, <span class="string">'webkit'</span>, <span class="string">'o'</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; vendors.length &amp;&amp; !<span class="built_in">window</span>.requestAnimationFrame; ++x) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'RequestAnimationFrame'</span>];</span><br><span class="line">    <span class="built_in">window</span>.cancelAnimationFrame = <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelAnimationFrame'</span>] ||</span><br><span class="line">      <span class="built_in">window</span>[vendors[x] + <span class="string">'CancelRequestAnimationFrame'</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>.requestAnimationFrame) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame = <span class="function"><span class="keyword">function</span> (<span class="params">callback, element</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> currTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">      <span class="keyword">var</span> timeToCall = <span class="built_in">Math</span>.max(<span class="number">0</span>, <span class="number">16</span> - (currTime - lastTime));</span><br><span class="line">      <span class="keyword">var</span> id = <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          callback(currTime + timeToCall);</span><br><span class="line">        &#125;,</span><br><span class="line">        timeToCall);</span><br><span class="line">      lastTime = currTime + timeToCall;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">window</span>.cancelAnimationFrame) &#123;</span><br><span class="line">    <span class="built_in">window</span>.cancelAnimationFrame = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">      clearTimeout(id);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// router-link 兼容</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="string">'-ms-scroll-limit'</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style &amp;&amp;</span><br><span class="line">    <span class="string">'-ms-ime-align'</span> <span class="keyword">in</span> <span class="built_in">document</span>.documentElement.style</span><br><span class="line">  ) &#123; <span class="comment">// detect it's IE11</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">"hashchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> currentPath = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (vue.$route.path !== currentPath) &#123;</span><br><span class="line">        vue.$router.push(currentPath)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>下载 es6-promise ie-placeholder 依赖并导入</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/7390950-10f5521e4bede268.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1563935436(1).jpg"></p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">// main.js 中使用 es6-promise</span></span><br><span class="line">promise.polyfill<span class="comment">()</span></span><br></pre></td></tr></table></figure>
<ul>
<li>下载 iview 并配置模块化引入</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.babelrc 添加plugins</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"presets"</span>: [</span><br><span class="line">    [<span class="string">"env"</span>, &#123;</span><br><span class="line">      <span class="attr">"modules"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"targets"</span>: &#123;</span><br><span class="line">        <span class="attr">"browsers"</span>: [<span class="string">"&gt; 1%"</span>, <span class="string">"last 2 versions"</span>, <span class="string">"not ie &lt;= 8"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    <span class="string">"stage-2"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"plugins"</span>: [<span class="string">"transform-vue-jsx"</span>, <span class="string">"transform-runtime"</span>,</span><br><span class="line">    [<span class="string">"import"</span>, &#123;</span><br><span class="line">      <span class="attr">"libraryName"</span>: <span class="string">"iview"</span>,</span><br><span class="line">      <span class="attr">"libraryDirectory"</span>: <span class="string">"src/components"</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//vue-loader.config.js  修改extract</span><br><span class="line">//npm <span class="keyword">install</span> <span class="keyword">extract</span>-<span class="built_in">text</span>-webpack-<span class="keyword">plugin</span> <span class="comment">--save-dev</span></span><br><span class="line">  loaders: utils.cssLoaders(&#123;</span><br><span class="line">    sourceMap: sourceMapEnabled,</span><br><span class="line">    <span class="keyword">extract</span>: <span class="literal">true</span>   //提取css到单个文件</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.base.conf.js  修改入口</span></span><br><span class="line"><span class="symbol">  entry:</span> &#123;</span><br><span class="line"><span class="comment">//  app: './src/main.js'</span></span><br><span class="line"><span class="symbol">    app:</span> [<span class="string">"babel-polyfill"</span>, <span class="string">"./src/main"</span>]</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.dev.conf.js  添加新配置</span></span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">    filename: utils.assetsPath(<span class="string">'css/[name].[contenthash].css'</span>),</span><br><span class="line">     allChunks: <span class="literal">true</span>,</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>js基础整理</title>
    <url>/2019/06/20/js%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="1-概念类"><a href="#1-概念类" class="headerlink" title="1 概念类"></a>1 概念类</h1><ul>
<li>数据类型</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">基本数据类型：<span class="built_in">Number</span> <span class="built_in">String</span> Null <span class="built_in">Boolean</span> Undefind <span class="built_in">Symbol</span></span><br><span class="line">引用数据类型：<span class="built_in">Object</span></span><br></pre></td></tr></table></figure>
 <a id="more"></a>
<ul>
<li>内置函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">OBject <span class="built_in">Array</span> <span class="built_in">Boolean</span> <span class="built_in">Number</span> Srting  <span class="built_in">Function</span> <span class="built_in">Date</span> <span class="built_in">RegExp</span> <span class="built_in">Error</span></span><br></pre></td></tr></table></figure>
<ul>
<li>this 的使用场景</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">在构造函数中使用 ==<span class="function">=&gt;</span> 构造函数本身</span><br><span class="line">作为对象属性时使用 ==<span class="function">=&gt;</span> 调用属性的对象</span><br><span class="line">作为普通函数时使用 ==<span class="function">=&gt;</span>  <span class="built_in">window</span></span><br><span class="line">call，apply，bind ==<span class="function">=&gt;</span> 执行的第一个参数</span><br></pre></td></tr></table></figure>
<ul>
<li>同步和异步的区别并举例</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">同步会阻塞代码，异步不会  alert是同步  <span class="built_in">setTimeout</span>是异步</span><br></pre></td></tr></table></figure>
<ul>
<li>原型和原型链</li>
</ul>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">原型： js中的对象分为两种，普通对象<span class="built_in">Object</span>和函数对象<span class="built_in">Function</span></span><br><span class="line">prototype就是函数对象的原型</span><br><span class="line">原型对象的值实际上就是在函数创建的时候,创建了一个它的实例对象</span><br><span class="line">并赋值给它的prototype</span><br><span class="line">原型链：原型组成的链。对象的_proto_属性指向它的原型，它的原型</span><br><span class="line">也是一个对象，也有_proto_属性，原型的_proto_又指向原型的原型，</span><br><span class="line">就这样可以一直通过__proto__向上找，这就是原型链，尽头是<span class="built_in">Object</span></span><br><span class="line">的原型。</span><br><span class="line"><span class="built_in">Object</span>的原型是<span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<ul>
<li>闭包</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">闭包是能够读取到其他函数内部变量的函数，也可以理解成定义在一个函数内部的函数</span><br></pre></td></tr></table></figure>
<ul>
<li>同源策略(跨域)</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">跨域是什么：实际上就是一个网站不能执行其他网站上的网址，是由浏览器同源策略造成的，是浏览器对<span class="keyword">js施加的安全限制</span></span><br><span class="line"><span class="keyword">所谓同源，实际上是指域名，协议，端口都相同</span></span><br><span class="line"><span class="keyword">也就是说当，域名或者协议，或者端口不同的时候，就是跨域</span></span><br></pre></td></tr></table></figure>
<p>-</p>
<p>#2 常用</p>
<ul>
<li>列举三种强制类型转换和两种隐式类型转换</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(),<span class="built_in">parseFloat</span>(),<span class="built_in">Number</span>()  <span class="comment">//强制</span></span><br><span class="line">==,!!                             <span class="comment">//隐式</span></span><br></pre></td></tr></table></figure>
<ul>
<li>阻止冒泡默认</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">e</span><span class="selector-class">.preventDefault</span>()    <span class="comment">//默认</span></span><br><span class="line"><span class="selector-tag">e</span><span class="selector-class">.stopPropagation</span>()  <span class="comment">//冒泡</span></span><br></pre></td></tr></table></figure>
<ul>
<li>==和===区别</li>
</ul>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="section">== 会自动转换类型 === 不会</span></span><br></pre></td></tr></table></figure>
<ul>
<li>null 和 undefind 的区别</li>
</ul>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span>是表示一个空的对象，转为数值为<span class="number">0</span>，undefind表示一个空的原始值，转为数值为NAN</span><br><span class="line">undefind指本该有一个值，但却并有定义，<span class="literal">null</span>表示没有对象，不应该有值</span><br></pre></td></tr></table></figure>
<ul>
<li>ajax 请求</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">创建一个xhr对象 <span class="keyword">var</span> xhr = <span class="keyword">new</span> XmlHttpRequest()</span><br><span class="line">判断就绪状态为<span class="number">4</span>时执行代码</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">创建请求 xhr.open(<span class="string">'get'</span>,<span class="string">'url'</span>,<span class="literal">true</span>)</span><br><span class="line">发送请求 xhr.send(<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>cookie localStorage sessionStorage</li>
</ul>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">// 与服务器的交互</span><br><span class="line">cookie数据始终在同源的<span class="keyword">http</span>请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。</span><br><span class="line">而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。</span><br><span class="line">// 存储大小限制也不同，</span><br><span class="line">cookie数据不能超过<span class="number">4</span>k，同时因为每次<span class="keyword">http</span>请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。</span><br><span class="line">sessionStorage和localStorage 虽然也有存储大小的限制，但比cookie大得多，可以达到<span class="number">5</span>M或更大。</span><br><span class="line">// 数据有效期不同，</span><br><span class="line">sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；</span><br><span class="line">localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；</span><br><span class="line">cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。</span><br><span class="line">// 作用域不同</span><br><span class="line">sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；</span><br><span class="line">localStorage 在所有同源窗口中都是共享的；</span><br><span class="line">cookie也是在所有同源窗口中都是共享的。</span><br></pre></td></tr></table></figure>
<ul>
<li>数组去重</li>
</ul>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">//最简单去重  (用indexof查询)</span><br><span class="line"> function (<span class="built_in">array</span>)&#123;</span><br><span class="line">    <span class="built_in">var</span> temp = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">var</span> i=<span class="number">0</span>;i&lt;<span class="built_in">array</span>.<span class="built_in">length</span>;i++)&#123;</span><br><span class="line">       <span class="keyword">if</span>(temp.indexOf(<span class="built_in">array</span>[i]) == -<span class="number">1</span>)&#123;</span><br><span class="line">        temp.<span class="built_in">push</span>(<span class="built_in">array</span>[i]);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">//原数组操作 (<span class="built_in">splice</span>方法)</span><br><span class="line"> funttion (arr)&#123;</span><br><span class="line">   <span class="built_in">let</span> <span class="built_in">length</span> = arr.<span class="built_in">length</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="built_in">var</span> i = <span class="number">0</span>;i&lt;<span class="built_in">length</span>;i++)&#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="built_in">var</span> j=i+<span class="number">1</span>;j&lt;<span class="built_in">length</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] === arr[j])&#123;</span><br><span class="line">         arr.<span class="built_in">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">         <span class="built_in">length</span> -- ;</span><br><span class="line">         j --;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 对象属性</span><br><span class="line">function (arr)&#123;</span><br><span class="line"><span class="built_in">let</span> obj = &#123;&#125;, res = []</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i = <span class="number">0</span>;i &lt; arr.<span class="built_in">length</span>;i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>(!obj[arr[i]])&#123;</span><br><span class="line">    obj[arr[i]] = <span class="number">1</span>;</span><br><span class="line">    res.<span class="built_in">push</span>(arr[i]);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">// es6 Set方法</span><br><span class="line"><span class="built_in">let</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="built_in">let</span> resultArr = [...<span class="built_in">new</span> Set(arr)]</span><br></pre></td></tr></table></figure>
<ul>
<li>获取字符串出现最多的值及次数</li>
</ul>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(str)</span>&#123;</span></span><br><span class="line">  var obj = &#123;&#125;;</span><br><span class="line">  var maxn = <span class="number">-1</span>;</span><br><span class="line">  var letter;</span><br><span class="line">  <span class="keyword">for</span>(var <span class="built_in">i</span> = <span class="number">0</span>; <span class="built_in">i</span> &lt; str.<span class="built_in">length</span>; <span class="built_in">i</span>++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj[s[<span class="built_in">i</span>]]) &#123;</span><br><span class="line">      obj[s[<span class="built_in">i</span>]]++;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     obj[s[<span class="built_in">i</span>]] = <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(obj[s[<span class="built_in">i</span>]] &gt; maxn) &#123;</span><br><span class="line">       maxn = obj[s[<span class="built_in">i</span>]];</span><br><span class="line">       letter = s[<span class="built_in">i</span>];</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> console.<span class="built_in">log</span>(letter:maxn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>ul 中含有多个 li 元素，点击 li 分别弹出对应的序号</li>
</ul>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// html</span></span><br><span class="line"> &lt;ul&gt;</span><br><span class="line">    &lt;<span class="keyword">li</span>&gt;a&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">li</span>&gt;a&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">li</span>&gt;a&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">li</span>&gt;a&lt;/<span class="keyword">li</span>&gt;</span><br><span class="line"> &lt;/ul&gt;</span><br><span class="line"><span class="comment">//js</span></span><br><span class="line"> let <span class="keyword">lis</span> = document.getElementsByTagName('<span class="keyword">li</span>')</span><br><span class="line"><span class="comment">//dom污染</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i = 0, length = <span class="keyword">lis</span>.length; i &lt; length; i++) &#123;</span><br><span class="line">      <span class="keyword">lis</span>[i].index = i;</span><br><span class="line">      <span class="keyword">lis</span>[i].onclick = function() &#123;</span><br><span class="line">        alert(this.index);</span><br><span class="line">      &#125;;</span><br><span class="line"><span class="comment">// 闭包</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i=0;i&lt;aLi.length;i++)&#123;</span><br><span class="line">           (function(i)&#123;</span><br><span class="line">              <span class="keyword">lis</span>[i].onclick = function()&#123;</span><br><span class="line">                    alert(i);</span><br><span class="line">              &#125;;</span><br><span class="line">            &#125;)(i);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>解析 url 参数</li>
</ul>
<figure class="highlight qml"><table><tr><td class="code"><pre><span class="line"><span class="comment">// split</span></span><br><span class="line">parseQueryString(<span class="built_in">url</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> query = <span class="built_in">url</span>.split(<span class="string">"?"</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> queryArr = query.split(<span class="string">"&amp;"</span>);</span><br><span class="line">    queryArr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">        <span class="keyword">var</span> value = item.split(<span class="string">"="</span>)[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">var</span> key = item.split(<span class="string">"="</span>)[<span class="number">0</span>];</span><br><span class="line">        obj[key] = value;</span><br><span class="line">        result.push(obj);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//正则</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[^&amp;=?]+=[^&amp;]*/g</span>;</span><br><span class="line"><span class="keyword">var</span> res = <span class="built_in">url</span>.match(reg);</span><br><span class="line"><span class="comment">// 获取具体的值</span></span><br><span class="line"><span class="keyword">var</span> getParamValue = <span class="function"><span class="keyword">function</span>(<span class="params">url,key</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(key+<span class="string">"=([^&amp;]*)"</span>,<span class="string">"i"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">url</span>.match(regex)[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>PxToRem</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement;</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> windowWidth = html.clientWidth;</span></span><br><span class="line">  if(windowWidth &gt; 640) windowWidth = 640;</span><br><span class="line"><span class="handlebars"><span class="xml">  if(windowWidth <span class="tag">&lt; <span class="attr">320</span>) <span class="attr">windowWidth</span> = <span class="string">320;</span></span></span></span></span><br><span class="line"><span class="actionscript">  html.style.fontSize = windowWidth / <span class="number">7.5</span> + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="actionscript">&#125;, <span class="literal">false</span>);</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>判断数据类型</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span></span><br><span class="line"><span class="keyword">instanceof</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call</span><br><span class="line"><span class="comment">//封装</span></span><br><span class="line"><span class="keyword">var</span> Type = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> type = &#123;&#125;;</span><br><span class="line">                <span class="keyword">var</span> typeArr = [<span class="string">'String'</span>, <span class="string">'Object'</span>, <span class="string">'Number'</span>, <span class="string">'Array'</span>,<span class="string">'Undefined'</span>, <span class="string">'Function'</span>, <span class="string">'Null'</span>, <span class="string">'Symbol'</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; typeArr.length; i++) &#123;</span><br><span class="line">                    (<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">                        type[<span class="string">'Is'</span> + name] = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(obj) == <span class="string">'[object '</span> + name + <span class="string">']'</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)(typeArr[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> type;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">Type.IsFunction(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)      Type.IsObject(&#123;&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>判断数组内包含某个元素</li>
</ul>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ARR</span>.includes(<span class="variable">$&#123;ITEM&#125;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>深拷贝</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 万金油方式</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(XXXX))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> obj</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(obj)</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(obj)</span><br><span class="line">    <span class="keyword">let</span> newObj = <span class="keyword">new</span> obj.<span class="keyword">constructor</span></span><br><span class="line">    for (<span class="params"><span class="keyword">let</span> key <span class="keyword">in</span> obj</span>) &#123;</span><br><span class="line">        newObj[key] = deepClone(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>使用hexo和github pages搭建个人博客</title>
    <url>/2018/11/06/%E4%BD%BF%E7%94%A8hexo%E5%92%8Cgithub-pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>服务器到期了，域名空着也没用，于是趁着空闲搭建一个基于 git 的博客</p>
 <a id="more"></a>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.下载 node 和 git 不解释</p>
<p>2.下载 hexo 命令如下图</p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPVqH.png" alt></p>
<ol start="3">
<li><p>找个自己看着顺眼的地方创建并初始化一个 hexo 如图</p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPPG6.png" alt="初始化"></p>
</li>
<li><p>下载依赖</p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPiRK.png" alt="下载依赖"></p>
</li>
<li><p>体验一下</p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPAMD.png" alt="本地运行"></p>
<p>浏览器输入<a href="http://localhost:4000/即可访问" target="_blank" rel="noopener">http://localhost:4000/即可访问</a></p>
</li>
</ol>
<h2 id="创建一个-github-pages-个人博客"><a href="#创建一个-github-pages-个人博客" class="headerlink" title="创建一个 github pages 个人博客"></a>创建一个 github pages 个人博客</h2><p>1.首先创建一个仓库</p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPEse.png" alt="点红框"></p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPmdA.png" alt></p>
<p>框框里按</p>
<blockquote>
<p>name.github.io</p>
</blockquote>
<p>格式来写 name 就是你的 github 的 name</p>
<p>2.生成令牌 （git 提交时校验身份）</p>
<p>在 git bash 中使用以下命令（需先设置用户名和邮箱）</p>
<p><code>cd ~/.ssh</code><br><code>ssh-keygen -t rsa -C &quot;邮箱@qq.com&quot; // 邮箱处写自己邮箱</code></p>
<p>一路回车</p>
<ol start="3">
<li><p>复制本地的 key 并添加到 git 上</p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPnII.png" alt="复制key"></p>
</li>
</ol>
<p><img src="https://s2.ax1x.com/2019/09/26/umPeZd.png" alt="设置"></p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPKit.png" alt="key"></p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPMJP.png" alt="新建key"></p>
<p>一眼就懂 不解释</p>
<p>4.测试一下</p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPQRf.png" alt="测试"></p>
<p>博客搭建完成!</p>
<h2 id="hexo-关联到-github"><a href="#hexo-关联到-github" class="headerlink" title="hexo 关联到 github"></a>hexo 关联到 github</h2><p>1.配置 Deployment，在 hexo 文件夹中，找到_config.yml 文件</p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPlz8.png" alt="_config.ym"></p>
<p>repo 填你博客仓库的 ssh</p>
<p><img src="https://s2.ax1x.com/2019/09/26/umP3QS.png" alt="github pages ssh"></p>
<p>2.下载部署所需扩展</p>
<p><code>npm i hexo-deployer-git --save</code></p>
<ol start="3">
<li><p>部署<br><img src="https://s2.ax1x.com/2019/09/26/umPGLQ.png" alt="部署命令"></p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPYZj.png" alt="成功提示"></p>
</li>
</ol>
<p>大功告成~</p>
<h2 id="域名解析到-github"><a href="#域名解析到-github" class="headerlink" title="域名解析到 github"></a>域名解析到 github</h2><p>1.在 source 文件夹新建一个 CNAME 文件 不要后缀</p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPtds.png" alt="CNAME"></p>
<p>填上自己的域名</p>
<p>2.域名解析</p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPNon.png" alt="域名管理"></p>
<p><img src="https://s2.ax1x.com/2019/09/26/umPaiq.png" alt="新建"></p>
<p>添加两条 CANME 主机记录一个@一个 www 记录值填你的 github pages 地址</p>
<h3 id="hexo-常用命令"><a href="#hexo-常用命令" class="headerlink" title="hexo 常用命令"></a>hexo 常用命令</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">hexo s == hexo server    <span class="comment">//启动服务预览</span></span><br><span class="line">hexo g == hexo <span class="keyword">generate</span>  <span class="comment">//生成</span></span><br><span class="line">hexo d == hexo deploy    <span class="comment">//部署</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>初探NUXT(ssr)</title>
    <url>/2019/11/21/%E5%88%9D%E6%8E%A2NUXT(ssr)/</url>
    <content><![CDATA[<blockquote>
<p>项目需要 seo 及兼容手机端,百度大法后选定了 nuxt,记录一下</p>
</blockquote>
<h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><a id="more"></a>
<blockquote>
<p>百度很多就不写了</p>
</blockquote>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="comment">// nuxt 会自动生成路由  主要提一下动态路由</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 目录结构为</span></span><br><span class="line"></span><br><span class="line">pages/</span><br><span class="line">--| <span class="variable">_slug</span>/</span><br><span class="line">-----| comments.vue</span><br><span class="line">-----| index.vue</span><br><span class="line">--| users/</span><br><span class="line">-----| <span class="variable">_id</span>.vue</span><br><span class="line">--| index.vue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的路由配置为</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router: &#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">name</span>: <span class="string">'index'</span>,</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      component: <span class="string">'pages/index.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">name</span>: <span class="string">'users-id'</span>,</span><br><span class="line">      path: <span class="string">'/users/:id?'</span>,</span><br><span class="line">      component: <span class="string">'pages/users/_id.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">name</span>: <span class="string">'slug'</span>,</span><br><span class="line">      path: <span class="string">'/:slug'</span>,</span><br><span class="line">      component: <span class="string">'pages/_slug/index.vue'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">name</span>: <span class="string">'slug-comments'</span>,</span><br><span class="line">      path: <span class="string">'/:slug/comments'</span>,</span><br><span class="line">      component: <span class="string">'pages/_slug/comments.vue'</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以在组件内检验参数</span></span><br><span class="line"></span><br><span class="line">export <span class="keyword">default</span> &#123;</span><br><span class="line">  validate (&#123; <span class="built_in">params</span> &#125;) &#123;</span><br><span class="line">    <span class="comment">// 必须是number类型</span></span><br><span class="line">    return /^\d+$/.test(<span class="built_in">params</span>.id)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 举个栗子 使用iview</span></span><br><span class="line"><span class="comment">// 在plugins目录创建iview.js  代码入下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> iView <span class="keyword">from</span> <span class="string">'iview'</span></span><br><span class="line"><span class="keyword">import</span> locale <span class="keyword">from</span> <span class="string">'iview/dist/locale/en-US'</span> <span class="comment">// Change locale, check node_modules/iview/dist/locale</span></span><br><span class="line"></span><br><span class="line">Vue.use(iView, &#123;</span><br><span class="line">  locale</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.prototype.$Message.config(&#123;</span><br><span class="line">  top: <span class="number">300</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// vuex刷新时需要初始化  我这边是用插件来设置</span></span><br><span class="line"><span class="comment">// initStore</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; localStore &#125; <span class="keyword">from</span> <span class="string">'@/utils/tools'</span></span><br><span class="line"><span class="keyword">import</span> &#123; getStore &#125; <span class="keyword">from</span> <span class="string">'@/utils/storage'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">&#123; $axios, store &#125;</span>) </span>&#123;        <span class="comment">//这里的参数为Context上下文对象</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">JSON</span>.stringify(store.state.info) === <span class="string">'&#123;&#125;'</span>) &#123;</span><br><span class="line">    $axios.post(<span class="string">'/api/common/info'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      store.commit(<span class="string">'SETINFO'</span>, res.data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (getStore(<span class="string">'token'</span>)) &#123;</span><br><span class="line">    store.dispatch(<span class="string">'changeLogin'</span>, &#123;</span><br><span class="line">      state: <span class="literal">true</span>,</span><br><span class="line">      info: <span class="built_in">JSON</span>.parse(getStore(<span class="string">'userInfo'</span>)) || &#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    $axios.post(<span class="string">'/api/common/history'</span>)</span><br><span class="line">    .then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">      store.commit(<span class="string">'GETHSITORY'</span>,res.data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    store.dispatch(<span class="string">'changeLogin'</span>, &#123;</span><br><span class="line">      state: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (localStore.get(<span class="string">'searchParams'</span>)) &#123;</span><br><span class="line">    store.commit(<span class="string">'SETSEARCH'</span>, localStore.get(<span class="string">'searchParams'</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// nuxt.config.js</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  plugins:[</span><br><span class="line">    &#123;</span><br><span class="line">      &#123;</span><br><span class="line">        src: <span class="string">'@/plugins/iview'</span>,</span><br><span class="line">        ssr: <span class="literal">true</span>     <span class="comment">//ssr默认为true 表示在服务端也会渲染</span></span><br><span class="line">      &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">        src: <span class="string">'@/plugins/initStore'</span>,</span><br><span class="line">        ssr: <span class="literal">false</span>   <span class="comment">//ssr为false时只在客户端渲染  需要用到window对象时就需要设置</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="兼容移动端配置"><a href="#兼容移动端配置" class="headerlink" title="兼容移动端配置"></a>兼容移动端配置</h3><blockquote>
<p>由于 PC 端需要兼容 ie9 并不能通用 所以我使用了两套代码 通过中间件来切换</p>
</blockquote>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// 在middleware文件下创建一个device.js  每次切换路由时会先进入中间件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; deviceType &#125; from <span class="string">"~/utils/tools"</span>;</span><br><span class="line"><span class="comment">// deviceType为判断客户端的方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="keyword">context</span>) &#123;</span><br><span class="line">  <span class="keyword">context</span><span class="variable">.userAgent</span> = process<span class="variable">.server</span></span><br><span class="line">    ? <span class="keyword">context</span><span class="variable">.req</span><span class="variable">.headers</span>[<span class="string">"user-agent"</span>]</span><br><span class="line">    : navigator<span class="variable">.userAgent</span>;</span><br><span class="line">  <span class="comment">// 给全局上下文添加一个属性来保存我们返回的匹配信息</span></span><br><span class="line">  <span class="comment">// console.log('tag', context)</span></span><br><span class="line">  <span class="keyword">context</span><span class="variable">.deviceType</span> = deviceType(<span class="keyword">context</span><span class="variable">.userAgent</span>);</span><br><span class="line">  <span class="comment">// 若是判断UA非移动端的,就在这里做处理了..</span></span><br><span class="line">  <span class="comment">// context.redirect(status,url) 这个可以重定向到外部网站</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">context</span><span class="variable">.deviceType</span><span class="variable">.type</span> === <span class="string">"pc"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (/m[-]*[\w]*/g<span class="variable">.test</span>(<span class="keyword">context</span><span class="variable">.route</span><span class="variable">.name</span>)) &#123;</span><br><span class="line">      <span class="keyword">context</span><span class="variable">.redirect</span>(<span class="keyword">context</span><span class="variable">.route</span><span class="variable">.fullPath</span><span class="variable">.slice</span>(<span class="number">2</span>));  <span class="comment">// 转换url  /m/about 转为 /about</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!/m[-]*[\w]*/g<span class="variable">.test</span>(<span class="keyword">context</span><span class="variable">.route</span><span class="variable">.name</span>)) &#123;</span><br><span class="line">      <span class="comment">//   //redirect path from '/&#123;PATH&#125;' to '/m /&#123;PATH&#125;';</span></span><br><span class="line">      <span class="keyword">context</span><span class="variable">.redirect</span>(<span class="string">"/m"</span> + <span class="keyword">context</span><span class="variable">.route</span><span class="variable">.fullPath</span>); <span class="comment">// 转换url  /about 转为 /m/about</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nuxt.config.js</span></span><br><span class="line">  router: &#123;</span><br><span class="line">    mode: 'history',</span><br><span class="line">    middleware: [<span class="number">'de</span>vice'],</span><br><span class="line">    fallback: true</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//tools.js</span></span><br><span class="line"> <span class="keyword">const</span> deviceType = <span class="function"><span class="keyword">function</span> (<span class="params">UA</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> reg = <span class="regexp">/(Android|webOS|iPhone|iPod|tablet|BlackBerry|Mobile)/i</span>;</span><br><span class="line">  <span class="keyword">if</span> (reg.test(UA)) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">"mobile"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="keyword">type</span>: <span class="string">"pc"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  deviceType</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// axios</span></span><br><span class="line"> <span class="attribute">modules</span>: [</span><br><span class="line">   <span class="comment">// Doc: https://axios.nuxtjs.org/usage</span></span><br><span class="line">   <span class="string">'@nuxtjs/axios'</span></span><br><span class="line">   <span class="comment">// '@nuxtjs/proxy'</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  ** Axios module configuration</span></span><br><span class="line"><span class="comment">  ** See https://axios.nuxtjs.org/options</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="attribute">axios</span>: &#123;</span><br><span class="line">   <span class="attribute">proxy</span>: true,</span><br><span class="line">   <span class="comment">// baseUrl: 'https://api.kuaimaidian.com'</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attribute">proxy</span>: &#123;</span><br><span class="line">   <span class="string">'/api'</span>: &#123;</span><br><span class="line">     <span class="comment">// target: 'https://api.kuaimaidian.com',</span></span><br><span class="line">     <span class="attribute">target</span>: <span class="string">'http://192.168.2.17'</span>,</span><br><span class="line">     <span class="attribute">pathRewrite</span>: &#123;</span><br><span class="line">       <span class="string">'^/api'</span>: <span class="string">'/api'</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><blockquote>
<p>npm build 后将.nuxt,static,package.json,nuxt.config.js 这 4 个文件夹放到服务器目录文件下 或者直接在服务器上把代码拉下来 build,然后 npm i 安装依赖 ，最后 npm start 运行即可<br>这里有个地方要注意 我们需要在 nuxt.config.js 加上这行代码 ，不然的话访问不了</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3000</span><span class="string">,</span> <span class="string">//</span> <span class="attr">default:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">"0.0.0.0"</span> <span class="string">//</span> <span class="attr">default:</span> <span class="string">localhost</span></span><br><span class="line"><span class="string">&#125;,</span></span><br></pre></td></tr></table></figure>
<ul>
<li>nginx 配置</li>
</ul>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">upstream</span> nodenuxt &#123;</span><br><span class="line">  <span class="attribute">server</span> <span class="number">127.0.0.1:3000</span>; <span class="comment">#nuxt项目 监听端口</span></span><br><span class="line">  <span class="attribute">keepalive</span> <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> mysite.com;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Nginx-Proxy <span class="literal">true</span>;</span><br><span class="line">    <span class="attribute">proxy_cache_bypass</span> <span class="variable">$http_upgrade</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://nodenuxt; <span class="comment">#反向代理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>最后装 pm2 进程守护来启动 node 就 ok 了<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// pm2 常用命令</span><br><span class="line"> </span><br><span class="line">$ pm2 <span class="keyword">start</span> npm <span class="comment">--name "myapp" -- run start   // 启动名称为myapp的node程序</span></span><br><span class="line"></span><br><span class="line">$ pm2 <span class="keyword">start</span> app.js <span class="comment"># 启动app.js应用程序</span></span><br><span class="line">$ pm2 <span class="keyword">start</span> app.js <span class="comment">--name="api" # 启动应用程序并命名为 "api"</span></span><br><span class="line">$ pm2 <span class="keyword">start</span> app.js <span class="comment">--watch # 当文件变化时自动重启应用</span></span><br><span class="line">$ pm2 <span class="keyword">start</span> script.sh <span class="comment"># 启动 bash 脚本</span></span><br><span class="line"></span><br><span class="line">$ pm2 <span class="keyword">list</span> <span class="comment"># 列表 PM2 启动的所有的应用程序</span></span><br><span class="line">$ pm2 monit <span class="comment"># 显示每个应用程序的CPU和内存占用情况</span></span><br><span class="line">$ pm2 <span class="keyword">show</span> [app-<span class="keyword">name</span>] <span class="comment"># 显示应用程序的所有信息</span></span><br><span class="line"></span><br><span class="line">$ pm2 <span class="keyword">logs</span> <span class="comment"># 显示所有应用程序的日志</span></span><br><span class="line">$ pm2 <span class="keyword">logs</span> [app-<span class="keyword">name</span>] <span class="comment"># 显示指定应用程序的日志</span></span><br><span class="line">pm2 <span class="keyword">flush</span></span><br><span class="line"></span><br><span class="line">$ pm2 <span class="keyword">stop</span> <span class="keyword">all</span> <span class="comment"># 停止所有的应用程序</span></span><br><span class="line">$ pm2 <span class="keyword">stop</span> <span class="number">0</span> <span class="comment"># 停止 id为 0的指定应用程序</span></span><br><span class="line">$ pm2 restart <span class="keyword">all</span> <span class="comment"># 重启所有应用</span></span><br><span class="line">$ pm2 reload <span class="keyword">all</span> <span class="comment"># 重启 cluster mode下的所有应用</span></span><br><span class="line">$ pm2 gracefulReload <span class="keyword">all</span> <span class="comment"># Graceful reload all apps in cluster mode</span></span><br><span class="line">$ pm2 <span class="keyword">delete</span> <span class="keyword">all</span> <span class="comment"># 关闭并删除所有应用</span></span><br><span class="line">$ pm2 <span class="keyword">delete</span> <span class="number">0</span> <span class="comment"># 删除指定应用 id 0</span></span><br><span class="line">$ pm2 scale api <span class="number">10</span> <span class="comment"># 把名字叫api的应用扩展到10个实例</span></span><br><span class="line">$ pm2 <span class="keyword">reset</span> [app-<span class="keyword">name</span>] <span class="comment"># 重置重启数量</span></span><br><span class="line"></span><br><span class="line">$ pm2 <span class="keyword">startup</span> <span class="comment"># 创建开机自启动命令</span></span><br><span class="line">$ pm2 <span class="keyword">save</span> <span class="comment"># 保存当前应用列表</span></span><br><span class="line">$ pm2 resurrect <span class="comment"># 重新加载保存的应用列表</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2020/02/10/%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h4 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'原型链继承'</span></span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent()</span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> Child();</span><br><span class="line">child.getName()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点<br>1 引用类型的属性会被所有的实例共享<br>2 在创建Child实例时,不能向Parent传参</p>
</blockquote>
<a id="more"></a>
<h4 id="借用构造函数-经典继承"><a href="#借用构造函数-经典继承" class="headerlink" title="借用构造函数(经典继承)"></a>借用构造函数(经典继承)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.names = [<span class="string">'1111'</span>, <span class="string">'2222'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line">child1.names.push(<span class="string">'333'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.names); <span class="comment">// [ '1111', '2222', '333' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.names); <span class="comment">// [ '1111', '2222' ]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点<br>1 避免引用类型的属性被所有实例共享<br>2 阔以在Child中向Parent传参</p>
</blockquote>
<p>举个栗子<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'老王'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child1.name) <span class="comment">//老王</span></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'老李'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(child2.name) <span class="comment">//老李</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>缺点<br>方法都在构造函数中定义，每次创建实例都会创建一遍方法</p>
</blockquote>
<h4 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line">Child.prototype.constructor = Child;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'kevin'</span>, <span class="string">'18'</span>);</span><br><span class="line"></span><br><span class="line">child1.colors.push(<span class="string">'black'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1.name); <span class="comment">// kevin</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.age); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(child1.colors); <span class="comment">// ["red", "blue", "green", "black"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> Child(<span class="string">'daisy'</span>, <span class="string">'20'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child2.name); <span class="comment">// daisy</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.age); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(child2.colors); <span class="comment">// ["red", "blue", "green"]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>优点<br>融合原型链继承和构造函数的优点,是js中最常用的继承模式</p>
</blockquote>
<h4 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h4><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span><span class="params">(o)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    F.prototype = o</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>就是ES5 Object.create的实现 将传入的对象作为创建对象的原型</p>
<blockquote>
<p>缺点<br>包含引用类型的属性值始终都会共享相应的值，和原型链继承一样<br><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">var person = &#123;</span><br><span class="line">    <span class="built_in">name</span>: <span class="string">'kevin'</span>,</span><br><span class="line">    friends: [<span class="string">'daisy'</span>, <span class="string">'kelly'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var person1 = createObj(person);</span><br><span class="line">var person2 = createObj(person);</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'person1'</span>, person1); <span class="comment">//&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'person1/name'</span>, person1.<span class="built_in">name</span>); <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line">person1.<span class="built_in">name</span> = <span class="string">'person1'</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'person1'</span>, person1); <span class="comment">//  &#123; name: 'person1' &#125;</span></span><br><span class="line"></span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'person2'</span>, person2.<span class="built_in">name</span>); <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line">person1.friends.push(<span class="string">'taylor'</span>);</span><br><span class="line">console.<span class="built_in">log</span>(person2.friends); <span class="comment">// ["daisy", "kelly", "taylor"]</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>注意：修改person1.name的值，person2.name的值并未发生改变，并不是person1和person2有独立的name值，而是因为person1.name=’person1’, 给person1添加了name值，并非修改了原型上的name值</p>
</blockquote>
<h4 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h4><p>创建一个仅用与封装继承过程的函数，该函数在内部以某种方式来做增强对象,最后返回对象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createObj</span> <span class="params">(o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">clone</span> = Object.create(o);</span><br><span class="line">    <span class="keyword">clone</span>.sayHi = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        console.log(<span class="string">'hi'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">clone</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>缺点：跟借用构造函数模式一样 每次创建对象都会创建一次方法</p>
</blockquote>
<h4 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h4><p>组合式继承会调用好几次父构造函数 寄生组合阔以避免这个问题<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Parent.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span> (<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, name);</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键的三步</span></span><br><span class="line"><span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">F.prototype = Parent.prototype;</span><br><span class="line"></span><br><span class="line">Child.prototype = <span class="keyword">new</span> F();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> Child(<span class="string">'kevin'</span>, <span class="string">'18'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(child1);</span><br></pre></td></tr></table></figure></p>
<p>封装一下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span><span class="params">(o)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prototype</span><span class="params">(child, parent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prototype = object(<span class="keyword">parent</span>.prototype);</span><br><span class="line">    prototype.constructor = child;</span><br><span class="line">    child.prototype = prototype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们使用的时候：</span></span><br><span class="line">prototype(Child, <span class="keyword">Parent</span>);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>《JavaScript高级程序设计》<br>这种方式的高效率体现它只调用了一次 Parent 构造函数，并且因此避免了在 Parent.prototype 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 instanceof 和 isPrototypeOf。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p>
</blockquote>
]]></content>
      <tags>
        <tag>js基础</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序&amp;&amp;Taro记录</title>
    <url>/2019/11/15/%E5%B0%8F%E7%A8%8B%E5%BA%8F&amp;&amp;Taro%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<ul>
<li>Taro 扫码进入页面传递多个参数会被截断</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url: '/index?scene=id=1&amp;aa=2'</span></span><br><span class="line"><span class="comment">// 实测android不会自动转码 = 号后面会被截断 ios不会</span></span><br><span class="line">console<span class="selector-class">.log</span> (  this.<span class="variable">$router</span><span class="selector-class">.params</span><span class="selector-class">.scene</span> )</span><br><span class="line"><span class="comment">// android   id</span></span><br><span class="line"><span class="comment">// ios    id=1&amp;aa=2</span></span><br></pre></td></tr></table></figure>
  <a id="more"></a>
<ul>
<li><p>2.9.3 调试库 onInput 方法不触发</p>
<blockquote>
<p>官方 bug 找的我差点重装系统</p>
</blockquote>
</li>
<li><p>小程序 textarea 浮动问题</p>
<blockquote>
<p>textarea 的父级设置了 overflow 会导致样式错乱，把所有父级的 overflow 去掉就好了</p>
</blockquote>
</li>
<li><p>绑定事件传递数据</p>
</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">&lt;text data-id=<span class="string">"1"</span> bindClick=<span class="string">"test"</span>&gt;&lt;/text&gt;</span><br><span class="line"><span class="comment">// e.currentTarget.dataset</span></span><br><span class="line"><span class="comment">// 需要注意的是 data - &#123;&#123;item&#125;&#125;  item是不允许驼峰命名的</span></span><br><span class="line"><span class="function"><span class="title">test</span><span class="params">(e)</span></span>&#123;</span><br><span class="line">  console.log(e<span class="selector-class">.currentTarget</span><span class="selector-class">.dataset</span>.id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Taro 状态更新异步</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  aa: <span class="number">1</span></span><br><span class="line">&#125;, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="regexp">//</span> 在这个函数内你可以拿到 setState 之后的值</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>padding margin 不管用</p>
<blockquote>
<p>检查元素的 box-sizing 当前为什么模式 两种模式计算方式不一样</p>
</blockquote>
</li>
<li><p>跳转 tabbar 页面要用 wx.switchTab</p>
</li>
<li><p>Taro 项目运行报错 依赖下载报错</p>
</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">//安装sass报错</span><br><span class="line">npm install -g mirror-config-china</span><br><span class="line">// 运行报错先检查<span class="keyword">node</span><span class="title">版本 node</span>版本要求在<span class="number">10</span>.x</span><br></pre></td></tr></table></figure>
<ul>
<li>审核问题<blockquote>
<p>现在不允许任何主动弹窗,需要通过 button 来触发</p>
</blockquote>
</li>
</ul>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>随机生成验证码 兼容ie</title>
    <url>/2019/07/24/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    <content><![CDATA[<ul>
<li><p>随机生成验证码</p>
 <a id="more"></a>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//验证码 </span></span><br><span class="line"><span class="keyword">const</span> verifyCode = <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arrayTest = [<span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"v"</span>, <span class="string">"x"</span>, <span class="string">"z"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"q"</span>, <span class="string">"w"</span>, <span class="string">"r"</span>, <span class="string">"t"</span>, <span class="string">"y"</span>, <span class="string">"u"</span>, <span class="string">"i"</span>, <span class="string">"i"</span>, <span class="string">"o"</span>, <span class="string">"p"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">randomColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">    <span class="keyword">var</span> g = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">256</span>);</span><br><span class="line">    <span class="keyword">var</span> rgb = <span class="string">"rgb("</span> + r + <span class="string">","</span> + g + <span class="string">","</span> + b + <span class="string">")"</span>;</span><br><span class="line">    <span class="keyword">return</span> rgb;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createSpan</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> span = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">    span.style.display = <span class="string">"inline-block"</span></span><br><span class="line">    span.style.height = <span class="string">"100%"</span></span><br><span class="line">    span.style.width = <span class="string">"25%"</span>  <span class="comment">// 宽度根据验证码个数来定</span></span><br><span class="line">    span.style.color = randomColor()</span><br><span class="line">    span.innerHTML = code;</span><br><span class="line">    <span class="keyword">return</span> span</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(el);</span><br><span class="line">  element.innerHTML = <span class="string">''</span></span><br><span class="line">  <span class="keyword">let</span> codeArr = []</span><br><span class="line">  <span class="comment">// 禁用复制</span></span><br><span class="line">  element.oncopy = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//表示循环几次,循环出多少个数值.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * arrayTest.length);</span><br><span class="line">    <span class="keyword">var</span> code = arrayTest[num];</span><br><span class="line">    element.style.background = randomColor()</span><br><span class="line">    element.appendChild(createSpan(code))</span><br><span class="line">    codeArr.push(code)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> codeArr.join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> verifyCode</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
